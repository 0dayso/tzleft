/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule.rule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DayTimeItem implements org.apache.thrift.TBase<DayTimeItem, DayTimeItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DayTimeItem");

  private static final org.apache.thrift.protocol.TField ORIGIN_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("originCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DAY_TIME_SUB_ITEM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dayTimeSubItemList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField JUDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("judge", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DayTimeItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DayTimeItemTupleSchemeFactory());
  }

  public com.travelzen.farerule.condition.OriginCondition originCondition; // optional
  public List<DayTimeSubItem> dayTimeSubItemList; // optional
  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public com.travelzen.farerule.rule.Judge judge; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORIGIN_CONDITION((short)1, "originCondition"),
    DAY_TIME_SUB_ITEM_LIST((short)2, "dayTimeSubItemList"),
    /**
     * 
     * @see com.travelzen.farerule.rule.Judge
     */
    JUDGE((short)3, "judge");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORIGIN_CONDITION
          return ORIGIN_CONDITION;
        case 2: // DAY_TIME_SUB_ITEM_LIST
          return DAY_TIME_SUB_ITEM_LIST;
        case 3: // JUDGE
          return JUDGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ORIGIN_CONDITION,_Fields.DAY_TIME_SUB_ITEM_LIST,_Fields.JUDGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORIGIN_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("originCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.farerule.condition.OriginCondition.class)));
    tmpMap.put(_Fields.DAY_TIME_SUB_ITEM_LIST, new org.apache.thrift.meta_data.FieldMetaData("dayTimeSubItemList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DayTimeSubItem.class))));
    tmpMap.put(_Fields.JUDGE, new org.apache.thrift.meta_data.FieldMetaData("judge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.travelzen.farerule.rule.Judge.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DayTimeItem.class, metaDataMap);
  }

  public DayTimeItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DayTimeItem(DayTimeItem other) {
    if (other.isSetOriginCondition()) {
      this.originCondition = new com.travelzen.farerule.condition.OriginCondition(other.originCondition);
    }
    if (other.isSetDayTimeSubItemList()) {
      List<DayTimeSubItem> __this__dayTimeSubItemList = new ArrayList<DayTimeSubItem>();
      for (DayTimeSubItem other_element : other.dayTimeSubItemList) {
        __this__dayTimeSubItemList.add(new DayTimeSubItem(other_element));
      }
      this.dayTimeSubItemList = __this__dayTimeSubItemList;
    }
    if (other.isSetJudge()) {
      this.judge = other.judge;
    }
  }

  public DayTimeItem deepCopy() {
    return new DayTimeItem(this);
  }

  @Override
  public void clear() {
    this.originCondition = null;
    this.dayTimeSubItemList = null;
    this.judge = null;
  }

  public com.travelzen.farerule.condition.OriginCondition getOriginCondition() {
    return this.originCondition;
  }

  public DayTimeItem setOriginCondition(com.travelzen.farerule.condition.OriginCondition originCondition) {
    this.originCondition = originCondition;
    return this;
  }

  public void unsetOriginCondition() {
    this.originCondition = null;
  }

  /** Returns true if field originCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginCondition() {
    return this.originCondition != null;
  }

  public void setOriginConditionIsSet(boolean value) {
    if (!value) {
      this.originCondition = null;
    }
  }

  public int getDayTimeSubItemListSize() {
    return (this.dayTimeSubItemList == null) ? 0 : this.dayTimeSubItemList.size();
  }

  public java.util.Iterator<DayTimeSubItem> getDayTimeSubItemListIterator() {
    return (this.dayTimeSubItemList == null) ? null : this.dayTimeSubItemList.iterator();
  }

  public void addToDayTimeSubItemList(DayTimeSubItem elem) {
    if (this.dayTimeSubItemList == null) {
      this.dayTimeSubItemList = new ArrayList<DayTimeSubItem>();
    }
    this.dayTimeSubItemList.add(elem);
  }

  public List<DayTimeSubItem> getDayTimeSubItemList() {
    return this.dayTimeSubItemList;
  }

  public DayTimeItem setDayTimeSubItemList(List<DayTimeSubItem> dayTimeSubItemList) {
    this.dayTimeSubItemList = dayTimeSubItemList;
    return this;
  }

  public void unsetDayTimeSubItemList() {
    this.dayTimeSubItemList = null;
  }

  /** Returns true if field dayTimeSubItemList is set (has been assigned a value) and false otherwise */
  public boolean isSetDayTimeSubItemList() {
    return this.dayTimeSubItemList != null;
  }

  public void setDayTimeSubItemListIsSet(boolean value) {
    if (!value) {
      this.dayTimeSubItemList = null;
    }
  }

  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public com.travelzen.farerule.rule.Judge getJudge() {
    return this.judge;
  }

  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public DayTimeItem setJudge(com.travelzen.farerule.rule.Judge judge) {
    this.judge = judge;
    return this;
  }

  public void unsetJudge() {
    this.judge = null;
  }

  /** Returns true if field judge is set (has been assigned a value) and false otherwise */
  public boolean isSetJudge() {
    return this.judge != null;
  }

  public void setJudgeIsSet(boolean value) {
    if (!value) {
      this.judge = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORIGIN_CONDITION:
      if (value == null) {
        unsetOriginCondition();
      } else {
        setOriginCondition((com.travelzen.farerule.condition.OriginCondition)value);
      }
      break;

    case DAY_TIME_SUB_ITEM_LIST:
      if (value == null) {
        unsetDayTimeSubItemList();
      } else {
        setDayTimeSubItemList((List<DayTimeSubItem>)value);
      }
      break;

    case JUDGE:
      if (value == null) {
        unsetJudge();
      } else {
        setJudge((com.travelzen.farerule.rule.Judge)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORIGIN_CONDITION:
      return getOriginCondition();

    case DAY_TIME_SUB_ITEM_LIST:
      return getDayTimeSubItemList();

    case JUDGE:
      return getJudge();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORIGIN_CONDITION:
      return isSetOriginCondition();
    case DAY_TIME_SUB_ITEM_LIST:
      return isSetDayTimeSubItemList();
    case JUDGE:
      return isSetJudge();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DayTimeItem)
      return this.equals((DayTimeItem)that);
    return false;
  }

  public boolean equals(DayTimeItem that) {
    if (that == null)
      return false;

    boolean this_present_originCondition = true && this.isSetOriginCondition();
    boolean that_present_originCondition = true && that.isSetOriginCondition();
    if (this_present_originCondition || that_present_originCondition) {
      if (!(this_present_originCondition && that_present_originCondition))
        return false;
      if (!this.originCondition.equals(that.originCondition))
        return false;
    }

    boolean this_present_dayTimeSubItemList = true && this.isSetDayTimeSubItemList();
    boolean that_present_dayTimeSubItemList = true && that.isSetDayTimeSubItemList();
    if (this_present_dayTimeSubItemList || that_present_dayTimeSubItemList) {
      if (!(this_present_dayTimeSubItemList && that_present_dayTimeSubItemList))
        return false;
      if (!this.dayTimeSubItemList.equals(that.dayTimeSubItemList))
        return false;
    }

    boolean this_present_judge = true && this.isSetJudge();
    boolean that_present_judge = true && that.isSetJudge();
    if (this_present_judge || that_present_judge) {
      if (!(this_present_judge && that_present_judge))
        return false;
      if (!this.judge.equals(that.judge))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DayTimeItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DayTimeItem typedOther = (DayTimeItem)other;

    lastComparison = Boolean.valueOf(isSetOriginCondition()).compareTo(typedOther.isSetOriginCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originCondition, typedOther.originCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayTimeSubItemList()).compareTo(typedOther.isSetDayTimeSubItemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayTimeSubItemList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayTimeSubItemList, typedOther.dayTimeSubItemList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJudge()).compareTo(typedOther.isSetJudge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJudge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.judge, typedOther.judge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DayTimeItem(");
    boolean first = true;

    if (isSetOriginCondition()) {
      sb.append("originCondition:");
      if (this.originCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.originCondition);
      }
      first = false;
    }
    if (isSetDayTimeSubItemList()) {
      if (!first) sb.append(", ");
      sb.append("dayTimeSubItemList:");
      if (this.dayTimeSubItemList == null) {
        sb.append("null");
      } else {
        sb.append(this.dayTimeSubItemList);
      }
      first = false;
    }
    if (isSetJudge()) {
      if (!first) sb.append(", ");
      sb.append("judge:");
      if (this.judge == null) {
        sb.append("null");
      } else {
        sb.append(this.judge);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (originCondition != null) {
      originCondition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DayTimeItemStandardSchemeFactory implements SchemeFactory {
    public DayTimeItemStandardScheme getScheme() {
      return new DayTimeItemStandardScheme();
    }
  }

  private static class DayTimeItemStandardScheme extends StandardScheme<DayTimeItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DayTimeItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORIGIN_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.originCondition = new com.travelzen.farerule.condition.OriginCondition();
              struct.originCondition.read(iprot);
              struct.setOriginConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DAY_TIME_SUB_ITEM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.dayTimeSubItemList = new ArrayList<DayTimeSubItem>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  DayTimeSubItem _elem2; // required
                  _elem2 = new DayTimeSubItem();
                  _elem2.read(iprot);
                  struct.dayTimeSubItemList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setDayTimeSubItemListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JUDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.judge = com.travelzen.farerule.rule.Judge.findByValue(iprot.readI32());
              struct.setJudgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DayTimeItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.originCondition != null) {
        if (struct.isSetOriginCondition()) {
          oprot.writeFieldBegin(ORIGIN_CONDITION_FIELD_DESC);
          struct.originCondition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dayTimeSubItemList != null) {
        if (struct.isSetDayTimeSubItemList()) {
          oprot.writeFieldBegin(DAY_TIME_SUB_ITEM_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dayTimeSubItemList.size()));
            for (DayTimeSubItem _iter3 : struct.dayTimeSubItemList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.judge != null) {
        if (struct.isSetJudge()) {
          oprot.writeFieldBegin(JUDGE_FIELD_DESC);
          oprot.writeI32(struct.judge.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DayTimeItemTupleSchemeFactory implements SchemeFactory {
    public DayTimeItemTupleScheme getScheme() {
      return new DayTimeItemTupleScheme();
    }
  }

  private static class DayTimeItemTupleScheme extends TupleScheme<DayTimeItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DayTimeItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOriginCondition()) {
        optionals.set(0);
      }
      if (struct.isSetDayTimeSubItemList()) {
        optionals.set(1);
      }
      if (struct.isSetJudge()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOriginCondition()) {
        struct.originCondition.write(oprot);
      }
      if (struct.isSetDayTimeSubItemList()) {
        {
          oprot.writeI32(struct.dayTimeSubItemList.size());
          for (DayTimeSubItem _iter4 : struct.dayTimeSubItemList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetJudge()) {
        oprot.writeI32(struct.judge.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DayTimeItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.originCondition = new com.travelzen.farerule.condition.OriginCondition();
        struct.originCondition.read(iprot);
        struct.setOriginConditionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dayTimeSubItemList = new ArrayList<DayTimeSubItem>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            DayTimeSubItem _elem7; // required
            _elem7 = new DayTimeSubItem();
            _elem7.read(iprot);
            struct.dayTimeSubItemList.add(_elem7);
          }
        }
        struct.setDayTimeSubItemListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.judge = com.travelzen.farerule.rule.Judge.findByValue(iprot.readI32());
        struct.setJudgeIsSet(true);
      }
    }
  }

}

