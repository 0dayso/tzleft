/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule.rule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PenaltyContent implements org.apache.thrift.TBase<PenaltyContent, PenaltyContent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PenaltyContent");

  private static final org.apache.thrift.protocol.TField PENALTY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("penaltyType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PENALTY_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("penaltyRatio", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PENALTY_FEE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("penaltyFeeList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CONTAIN_DIFF_FIELD_DESC = new org.apache.thrift.protocol.TField("containDiff", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PenaltyContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PenaltyContentTupleSchemeFactory());
  }

  /**
   * 
   * @see PenaltyTypeEnum
   */
  public PenaltyTypeEnum penaltyType; // required
  public PenaltyRatio penaltyRatio; // optional
  public List<PenaltyFee> penaltyFeeList; // optional
  public boolean containDiff; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PenaltyTypeEnum
     */
    PENALTY_TYPE((short)1, "penaltyType"),
    PENALTY_RATIO((short)2, "penaltyRatio"),
    PENALTY_FEE_LIST((short)3, "penaltyFeeList"),
    CONTAIN_DIFF((short)4, "containDiff");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PENALTY_TYPE
          return PENALTY_TYPE;
        case 2: // PENALTY_RATIO
          return PENALTY_RATIO;
        case 3: // PENALTY_FEE_LIST
          return PENALTY_FEE_LIST;
        case 4: // CONTAIN_DIFF
          return CONTAIN_DIFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTAINDIFF_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PENALTY_RATIO,_Fields.PENALTY_FEE_LIST,_Fields.CONTAIN_DIFF};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PENALTY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("penaltyType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PenaltyTypeEnum.class)));
    tmpMap.put(_Fields.PENALTY_RATIO, new org.apache.thrift.meta_data.FieldMetaData("penaltyRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PenaltyRatio.class)));
    tmpMap.put(_Fields.PENALTY_FEE_LIST, new org.apache.thrift.meta_data.FieldMetaData("penaltyFeeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PenaltyFee.class))));
    tmpMap.put(_Fields.CONTAIN_DIFF, new org.apache.thrift.meta_data.FieldMetaData("containDiff", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PenaltyContent.class, metaDataMap);
  }

  public PenaltyContent() {
  }

  public PenaltyContent(
    PenaltyTypeEnum penaltyType)
  {
    this();
    this.penaltyType = penaltyType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PenaltyContent(PenaltyContent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPenaltyType()) {
      this.penaltyType = other.penaltyType;
    }
    if (other.isSetPenaltyRatio()) {
      this.penaltyRatio = new PenaltyRatio(other.penaltyRatio);
    }
    if (other.isSetPenaltyFeeList()) {
      List<PenaltyFee> __this__penaltyFeeList = new ArrayList<PenaltyFee>();
      for (PenaltyFee other_element : other.penaltyFeeList) {
        __this__penaltyFeeList.add(new PenaltyFee(other_element));
      }
      this.penaltyFeeList = __this__penaltyFeeList;
    }
    this.containDiff = other.containDiff;
  }

  public PenaltyContent deepCopy() {
    return new PenaltyContent(this);
  }

  @Override
  public void clear() {
    this.penaltyType = null;
    this.penaltyRatio = null;
    this.penaltyFeeList = null;
    setContainDiffIsSet(false);
    this.containDiff = false;
  }

  /**
   * 
   * @see PenaltyTypeEnum
   */
  public PenaltyTypeEnum getPenaltyType() {
    return this.penaltyType;
  }

  /**
   * 
   * @see PenaltyTypeEnum
   */
  public PenaltyContent setPenaltyType(PenaltyTypeEnum penaltyType) {
    this.penaltyType = penaltyType;
    return this;
  }

  public void unsetPenaltyType() {
    this.penaltyType = null;
  }

  /** Returns true if field penaltyType is set (has been assigned a value) and false otherwise */
  public boolean isSetPenaltyType() {
    return this.penaltyType != null;
  }

  public void setPenaltyTypeIsSet(boolean value) {
    if (!value) {
      this.penaltyType = null;
    }
  }

  public PenaltyRatio getPenaltyRatio() {
    return this.penaltyRatio;
  }

  public PenaltyContent setPenaltyRatio(PenaltyRatio penaltyRatio) {
    this.penaltyRatio = penaltyRatio;
    return this;
  }

  public void unsetPenaltyRatio() {
    this.penaltyRatio = null;
  }

  /** Returns true if field penaltyRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetPenaltyRatio() {
    return this.penaltyRatio != null;
  }

  public void setPenaltyRatioIsSet(boolean value) {
    if (!value) {
      this.penaltyRatio = null;
    }
  }

  public int getPenaltyFeeListSize() {
    return (this.penaltyFeeList == null) ? 0 : this.penaltyFeeList.size();
  }

  public java.util.Iterator<PenaltyFee> getPenaltyFeeListIterator() {
    return (this.penaltyFeeList == null) ? null : this.penaltyFeeList.iterator();
  }

  public void addToPenaltyFeeList(PenaltyFee elem) {
    if (this.penaltyFeeList == null) {
      this.penaltyFeeList = new ArrayList<PenaltyFee>();
    }
    this.penaltyFeeList.add(elem);
  }

  public List<PenaltyFee> getPenaltyFeeList() {
    return this.penaltyFeeList;
  }

  public PenaltyContent setPenaltyFeeList(List<PenaltyFee> penaltyFeeList) {
    this.penaltyFeeList = penaltyFeeList;
    return this;
  }

  public void unsetPenaltyFeeList() {
    this.penaltyFeeList = null;
  }

  /** Returns true if field penaltyFeeList is set (has been assigned a value) and false otherwise */
  public boolean isSetPenaltyFeeList() {
    return this.penaltyFeeList != null;
  }

  public void setPenaltyFeeListIsSet(boolean value) {
    if (!value) {
      this.penaltyFeeList = null;
    }
  }

  public boolean isContainDiff() {
    return this.containDiff;
  }

  public PenaltyContent setContainDiff(boolean containDiff) {
    this.containDiff = containDiff;
    setContainDiffIsSet(true);
    return this;
  }

  public void unsetContainDiff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTAINDIFF_ISSET_ID);
  }

  /** Returns true if field containDiff is set (has been assigned a value) and false otherwise */
  public boolean isSetContainDiff() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTAINDIFF_ISSET_ID);
  }

  public void setContainDiffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTAINDIFF_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PENALTY_TYPE:
      if (value == null) {
        unsetPenaltyType();
      } else {
        setPenaltyType((PenaltyTypeEnum)value);
      }
      break;

    case PENALTY_RATIO:
      if (value == null) {
        unsetPenaltyRatio();
      } else {
        setPenaltyRatio((PenaltyRatio)value);
      }
      break;

    case PENALTY_FEE_LIST:
      if (value == null) {
        unsetPenaltyFeeList();
      } else {
        setPenaltyFeeList((List<PenaltyFee>)value);
      }
      break;

    case CONTAIN_DIFF:
      if (value == null) {
        unsetContainDiff();
      } else {
        setContainDiff((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PENALTY_TYPE:
      return getPenaltyType();

    case PENALTY_RATIO:
      return getPenaltyRatio();

    case PENALTY_FEE_LIST:
      return getPenaltyFeeList();

    case CONTAIN_DIFF:
      return Boolean.valueOf(isContainDiff());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PENALTY_TYPE:
      return isSetPenaltyType();
    case PENALTY_RATIO:
      return isSetPenaltyRatio();
    case PENALTY_FEE_LIST:
      return isSetPenaltyFeeList();
    case CONTAIN_DIFF:
      return isSetContainDiff();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PenaltyContent)
      return this.equals((PenaltyContent)that);
    return false;
  }

  public boolean equals(PenaltyContent that) {
    if (that == null)
      return false;

    boolean this_present_penaltyType = true && this.isSetPenaltyType();
    boolean that_present_penaltyType = true && that.isSetPenaltyType();
    if (this_present_penaltyType || that_present_penaltyType) {
      if (!(this_present_penaltyType && that_present_penaltyType))
        return false;
      if (!this.penaltyType.equals(that.penaltyType))
        return false;
    }

    boolean this_present_penaltyRatio = true && this.isSetPenaltyRatio();
    boolean that_present_penaltyRatio = true && that.isSetPenaltyRatio();
    if (this_present_penaltyRatio || that_present_penaltyRatio) {
      if (!(this_present_penaltyRatio && that_present_penaltyRatio))
        return false;
      if (!this.penaltyRatio.equals(that.penaltyRatio))
        return false;
    }

    boolean this_present_penaltyFeeList = true && this.isSetPenaltyFeeList();
    boolean that_present_penaltyFeeList = true && that.isSetPenaltyFeeList();
    if (this_present_penaltyFeeList || that_present_penaltyFeeList) {
      if (!(this_present_penaltyFeeList && that_present_penaltyFeeList))
        return false;
      if (!this.penaltyFeeList.equals(that.penaltyFeeList))
        return false;
    }

    boolean this_present_containDiff = true && this.isSetContainDiff();
    boolean that_present_containDiff = true && that.isSetContainDiff();
    if (this_present_containDiff || that_present_containDiff) {
      if (!(this_present_containDiff && that_present_containDiff))
        return false;
      if (this.containDiff != that.containDiff)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PenaltyContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PenaltyContent typedOther = (PenaltyContent)other;

    lastComparison = Boolean.valueOf(isSetPenaltyType()).compareTo(typedOther.isSetPenaltyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenaltyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penaltyType, typedOther.penaltyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPenaltyRatio()).compareTo(typedOther.isSetPenaltyRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenaltyRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penaltyRatio, typedOther.penaltyRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPenaltyFeeList()).compareTo(typedOther.isSetPenaltyFeeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenaltyFeeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penaltyFeeList, typedOther.penaltyFeeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContainDiff()).compareTo(typedOther.isSetContainDiff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContainDiff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.containDiff, typedOther.containDiff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PenaltyContent(");
    boolean first = true;

    sb.append("penaltyType:");
    if (this.penaltyType == null) {
      sb.append("null");
    } else {
      sb.append(this.penaltyType);
    }
    first = false;
    if (isSetPenaltyRatio()) {
      if (!first) sb.append(", ");
      sb.append("penaltyRatio:");
      if (this.penaltyRatio == null) {
        sb.append("null");
      } else {
        sb.append(this.penaltyRatio);
      }
      first = false;
    }
    if (isSetPenaltyFeeList()) {
      if (!first) sb.append(", ");
      sb.append("penaltyFeeList:");
      if (this.penaltyFeeList == null) {
        sb.append("null");
      } else {
        sb.append(this.penaltyFeeList);
      }
      first = false;
    }
    if (isSetContainDiff()) {
      if (!first) sb.append(", ");
      sb.append("containDiff:");
      sb.append(this.containDiff);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (penaltyType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'penaltyType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (penaltyRatio != null) {
      penaltyRatio.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PenaltyContentStandardSchemeFactory implements SchemeFactory {
    public PenaltyContentStandardScheme getScheme() {
      return new PenaltyContentStandardScheme();
    }
  }

  private static class PenaltyContentStandardScheme extends StandardScheme<PenaltyContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PenaltyContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PENALTY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.penaltyType = PenaltyTypeEnum.findByValue(iprot.readI32());
              struct.setPenaltyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PENALTY_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.penaltyRatio = new PenaltyRatio();
              struct.penaltyRatio.read(iprot);
              struct.setPenaltyRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PENALTY_FEE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.penaltyFeeList = new ArrayList<PenaltyFee>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  PenaltyFee _elem2; // required
                  _elem2 = new PenaltyFee();
                  _elem2.read(iprot);
                  struct.penaltyFeeList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPenaltyFeeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTAIN_DIFF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.containDiff = iprot.readBool();
              struct.setContainDiffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PenaltyContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.penaltyType != null) {
        oprot.writeFieldBegin(PENALTY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.penaltyType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.penaltyRatio != null) {
        if (struct.isSetPenaltyRatio()) {
          oprot.writeFieldBegin(PENALTY_RATIO_FIELD_DESC);
          struct.penaltyRatio.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.penaltyFeeList != null) {
        if (struct.isSetPenaltyFeeList()) {
          oprot.writeFieldBegin(PENALTY_FEE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.penaltyFeeList.size()));
            for (PenaltyFee _iter3 : struct.penaltyFeeList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetContainDiff()) {
        oprot.writeFieldBegin(CONTAIN_DIFF_FIELD_DESC);
        oprot.writeBool(struct.containDiff);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PenaltyContentTupleSchemeFactory implements SchemeFactory {
    public PenaltyContentTupleScheme getScheme() {
      return new PenaltyContentTupleScheme();
    }
  }

  private static class PenaltyContentTupleScheme extends TupleScheme<PenaltyContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PenaltyContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.penaltyType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetPenaltyRatio()) {
        optionals.set(0);
      }
      if (struct.isSetPenaltyFeeList()) {
        optionals.set(1);
      }
      if (struct.isSetContainDiff()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPenaltyRatio()) {
        struct.penaltyRatio.write(oprot);
      }
      if (struct.isSetPenaltyFeeList()) {
        {
          oprot.writeI32(struct.penaltyFeeList.size());
          for (PenaltyFee _iter4 : struct.penaltyFeeList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetContainDiff()) {
        oprot.writeBool(struct.containDiff);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PenaltyContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.penaltyType = PenaltyTypeEnum.findByValue(iprot.readI32());
      struct.setPenaltyTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.penaltyRatio = new PenaltyRatio();
        struct.penaltyRatio.read(iprot);
        struct.setPenaltyRatioIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.penaltyFeeList = new ArrayList<PenaltyFee>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            PenaltyFee _elem7; // required
            _elem7 = new PenaltyFee();
            _elem7.read(iprot);
            struct.penaltyFeeList.add(_elem7);
          }
        }
        struct.setPenaltyFeeListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.containDiff = iprot.readBool();
        struct.setContainDiffIsSet(true);
      }
    }
  }

}

