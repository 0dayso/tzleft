/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule.mongo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Location implements org.apache.thrift.TBase<Location, Location._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Location");

  private static final org.apache.thrift.protocol.TField EN_LOC_FIELD_DESC = new org.apache.thrift.protocol.TField("enLoc", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CN_LOC_FIELD_DESC = new org.apache.thrift.protocol.TField("cnLoc", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LocationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LocationTupleSchemeFactory());
  }

  public String enLoc; // required
  public String cnLoc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EN_LOC((short)1, "enLoc"),
    CN_LOC((short)2, "cnLoc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EN_LOC
          return EN_LOC;
        case 2: // CN_LOC
          return CN_LOC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CN_LOC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EN_LOC, new org.apache.thrift.meta_data.FieldMetaData("enLoc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_LOC, new org.apache.thrift.meta_data.FieldMetaData("cnLoc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Location.class, metaDataMap);
  }

  public Location() {
  }

  public Location(
    String enLoc)
  {
    this();
    this.enLoc = enLoc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Location(Location other) {
    if (other.isSetEnLoc()) {
      this.enLoc = other.enLoc;
    }
    if (other.isSetCnLoc()) {
      this.cnLoc = other.cnLoc;
    }
  }

  public Location deepCopy() {
    return new Location(this);
  }

  @Override
  public void clear() {
    this.enLoc = null;
    this.cnLoc = null;
  }

  public String getEnLoc() {
    return this.enLoc;
  }

  public Location setEnLoc(String enLoc) {
    this.enLoc = enLoc;
    return this;
  }

  public void unsetEnLoc() {
    this.enLoc = null;
  }

  /** Returns true if field enLoc is set (has been assigned a value) and false otherwise */
  public boolean isSetEnLoc() {
    return this.enLoc != null;
  }

  public void setEnLocIsSet(boolean value) {
    if (!value) {
      this.enLoc = null;
    }
  }

  public String getCnLoc() {
    return this.cnLoc;
  }

  public Location setCnLoc(String cnLoc) {
    this.cnLoc = cnLoc;
    return this;
  }

  public void unsetCnLoc() {
    this.cnLoc = null;
  }

  /** Returns true if field cnLoc is set (has been assigned a value) and false otherwise */
  public boolean isSetCnLoc() {
    return this.cnLoc != null;
  }

  public void setCnLocIsSet(boolean value) {
    if (!value) {
      this.cnLoc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EN_LOC:
      if (value == null) {
        unsetEnLoc();
      } else {
        setEnLoc((String)value);
      }
      break;

    case CN_LOC:
      if (value == null) {
        unsetCnLoc();
      } else {
        setCnLoc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EN_LOC:
      return getEnLoc();

    case CN_LOC:
      return getCnLoc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EN_LOC:
      return isSetEnLoc();
    case CN_LOC:
      return isSetCnLoc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Location)
      return this.equals((Location)that);
    return false;
  }

  public boolean equals(Location that) {
    if (that == null)
      return false;

    boolean this_present_enLoc = true && this.isSetEnLoc();
    boolean that_present_enLoc = true && that.isSetEnLoc();
    if (this_present_enLoc || that_present_enLoc) {
      if (!(this_present_enLoc && that_present_enLoc))
        return false;
      if (!this.enLoc.equals(that.enLoc))
        return false;
    }

    boolean this_present_cnLoc = true && this.isSetCnLoc();
    boolean that_present_cnLoc = true && that.isSetCnLoc();
    if (this_present_cnLoc || that_present_cnLoc) {
      if (!(this_present_cnLoc && that_present_cnLoc))
        return false;
      if (!this.cnLoc.equals(that.cnLoc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Location other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Location typedOther = (Location)other;

    lastComparison = Boolean.valueOf(isSetEnLoc()).compareTo(typedOther.isSetEnLoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnLoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enLoc, typedOther.enLoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnLoc()).compareTo(typedOther.isSetCnLoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnLoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnLoc, typedOther.cnLoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Location(");
    boolean first = true;

    sb.append("enLoc:");
    if (this.enLoc == null) {
      sb.append("null");
    } else {
      sb.append(this.enLoc);
    }
    first = false;
    if (isSetCnLoc()) {
      if (!first) sb.append(", ");
      sb.append("cnLoc:");
      if (this.cnLoc == null) {
        sb.append("null");
      } else {
        sb.append(this.cnLoc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (enLoc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'enLoc' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LocationStandardSchemeFactory implements SchemeFactory {
    public LocationStandardScheme getScheme() {
      return new LocationStandardScheme();
    }
  }

  private static class LocationStandardScheme extends StandardScheme<Location> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Location struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EN_LOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enLoc = iprot.readString();
              struct.setEnLocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CN_LOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnLoc = iprot.readString();
              struct.setCnLocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Location struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.enLoc != null) {
        oprot.writeFieldBegin(EN_LOC_FIELD_DESC);
        oprot.writeString(struct.enLoc);
        oprot.writeFieldEnd();
      }
      if (struct.cnLoc != null) {
        if (struct.isSetCnLoc()) {
          oprot.writeFieldBegin(CN_LOC_FIELD_DESC);
          oprot.writeString(struct.cnLoc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LocationTupleSchemeFactory implements SchemeFactory {
    public LocationTupleScheme getScheme() {
      return new LocationTupleScheme();
    }
  }

  private static class LocationTupleScheme extends TupleScheme<Location> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Location struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.enLoc);
      BitSet optionals = new BitSet();
      if (struct.isSetCnLoc()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetCnLoc()) {
        oprot.writeString(struct.cnLoc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Location struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.enLoc = iprot.readString();
      struct.setEnLocIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.cnLoc = iprot.readString();
        struct.setCnLocIsSet(true);
      }
    }
  }

}

