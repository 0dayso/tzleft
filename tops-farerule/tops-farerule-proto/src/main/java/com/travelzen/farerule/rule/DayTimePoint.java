/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule.rule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DayTimePoint implements org.apache.thrift.TBase<DayTimePoint, DayTimePoint._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DayTimePoint");

  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AMPM_FIELD_DESC = new org.apache.thrift.protocol.TField("ampm", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WEEKDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("weekday", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DayTimePointStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DayTimePointTupleSchemeFactory());
  }

  public String time; // optional
  /**
   * 
   * @see AmPmEnum
   */
  public AmPmEnum ampm; // optional
  /**
   * 
   * @see WeekDayEnum
   */
  public WeekDayEnum weekday; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME((short)1, "time"),
    /**
     * 
     * @see AmPmEnum
     */
    AMPM((short)2, "ampm"),
    /**
     * 
     * @see WeekDayEnum
     */
    WEEKDAY((short)3, "weekday");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME
          return TIME;
        case 2: // AMPM
          return AMPM;
        case 3: // WEEKDAY
          return WEEKDAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TIME,_Fields.AMPM,_Fields.WEEKDAY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMPM, new org.apache.thrift.meta_data.FieldMetaData("ampm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AmPmEnum.class)));
    tmpMap.put(_Fields.WEEKDAY, new org.apache.thrift.meta_data.FieldMetaData("weekday", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WeekDayEnum.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DayTimePoint.class, metaDataMap);
  }

  public DayTimePoint() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DayTimePoint(DayTimePoint other) {
    if (other.isSetTime()) {
      this.time = other.time;
    }
    if (other.isSetAmpm()) {
      this.ampm = other.ampm;
    }
    if (other.isSetWeekday()) {
      this.weekday = other.weekday;
    }
  }

  public DayTimePoint deepCopy() {
    return new DayTimePoint(this);
  }

  @Override
  public void clear() {
    this.time = null;
    this.ampm = null;
    this.weekday = null;
  }

  public String getTime() {
    return this.time;
  }

  public DayTimePoint setTime(String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  /**
   * 
   * @see AmPmEnum
   */
  public AmPmEnum getAmpm() {
    return this.ampm;
  }

  /**
   * 
   * @see AmPmEnum
   */
  public DayTimePoint setAmpm(AmPmEnum ampm) {
    this.ampm = ampm;
    return this;
  }

  public void unsetAmpm() {
    this.ampm = null;
  }

  /** Returns true if field ampm is set (has been assigned a value) and false otherwise */
  public boolean isSetAmpm() {
    return this.ampm != null;
  }

  public void setAmpmIsSet(boolean value) {
    if (!value) {
      this.ampm = null;
    }
  }

  /**
   * 
   * @see WeekDayEnum
   */
  public WeekDayEnum getWeekday() {
    return this.weekday;
  }

  /**
   * 
   * @see WeekDayEnum
   */
  public DayTimePoint setWeekday(WeekDayEnum weekday) {
    this.weekday = weekday;
    return this;
  }

  public void unsetWeekday() {
    this.weekday = null;
  }

  /** Returns true if field weekday is set (has been assigned a value) and false otherwise */
  public boolean isSetWeekday() {
    return this.weekday != null;
  }

  public void setWeekdayIsSet(boolean value) {
    if (!value) {
      this.weekday = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    case AMPM:
      if (value == null) {
        unsetAmpm();
      } else {
        setAmpm((AmPmEnum)value);
      }
      break;

    case WEEKDAY:
      if (value == null) {
        unsetWeekday();
      } else {
        setWeekday((WeekDayEnum)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME:
      return getTime();

    case AMPM:
      return getAmpm();

    case WEEKDAY:
      return getWeekday();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME:
      return isSetTime();
    case AMPM:
      return isSetAmpm();
    case WEEKDAY:
      return isSetWeekday();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DayTimePoint)
      return this.equals((DayTimePoint)that);
    return false;
  }

  public boolean equals(DayTimePoint that) {
    if (that == null)
      return false;

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_ampm = true && this.isSetAmpm();
    boolean that_present_ampm = true && that.isSetAmpm();
    if (this_present_ampm || that_present_ampm) {
      if (!(this_present_ampm && that_present_ampm))
        return false;
      if (!this.ampm.equals(that.ampm))
        return false;
    }

    boolean this_present_weekday = true && this.isSetWeekday();
    boolean that_present_weekday = true && that.isSetWeekday();
    if (this_present_weekday || that_present_weekday) {
      if (!(this_present_weekday && that_present_weekday))
        return false;
      if (!this.weekday.equals(that.weekday))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DayTimePoint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DayTimePoint typedOther = (DayTimePoint)other;

    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmpm()).compareTo(typedOther.isSetAmpm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmpm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ampm, typedOther.ampm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeekday()).compareTo(typedOther.isSetWeekday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeekday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weekday, typedOther.weekday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DayTimePoint(");
    boolean first = true;

    if (isSetTime()) {
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
    }
    if (isSetAmpm()) {
      if (!first) sb.append(", ");
      sb.append("ampm:");
      if (this.ampm == null) {
        sb.append("null");
      } else {
        sb.append(this.ampm);
      }
      first = false;
    }
    if (isSetWeekday()) {
      if (!first) sb.append(", ");
      sb.append("weekday:");
      if (this.weekday == null) {
        sb.append("null");
      } else {
        sb.append(this.weekday);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DayTimePointStandardSchemeFactory implements SchemeFactory {
    public DayTimePointStandardScheme getScheme() {
      return new DayTimePointStandardScheme();
    }
  }

  private static class DayTimePointStandardScheme extends StandardScheme<DayTimePoint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DayTimePoint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AMPM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ampm = AmPmEnum.findByValue(iprot.readI32());
              struct.setAmpmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WEEKDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weekday = WeekDayEnum.findByValue(iprot.readI32());
              struct.setWeekdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DayTimePoint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.time != null) {
        if (struct.isSetTime()) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ampm != null) {
        if (struct.isSetAmpm()) {
          oprot.writeFieldBegin(AMPM_FIELD_DESC);
          oprot.writeI32(struct.ampm.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.weekday != null) {
        if (struct.isSetWeekday()) {
          oprot.writeFieldBegin(WEEKDAY_FIELD_DESC);
          oprot.writeI32(struct.weekday.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DayTimePointTupleSchemeFactory implements SchemeFactory {
    public DayTimePointTupleScheme getScheme() {
      return new DayTimePointTupleScheme();
    }
  }

  private static class DayTimePointTupleScheme extends TupleScheme<DayTimePoint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DayTimePoint struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTime()) {
        optionals.set(0);
      }
      if (struct.isSetAmpm()) {
        optionals.set(1);
      }
      if (struct.isSetWeekday()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetAmpm()) {
        oprot.writeI32(struct.ampm.getValue());
      }
      if (struct.isSetWeekday()) {
        oprot.writeI32(struct.weekday.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DayTimePoint struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ampm = AmPmEnum.findByValue(iprot.readI32());
        struct.setAmpmIsSet(true);
      }
      if (incoming.get(2)) {
        struct.weekday = WeekDayEnum.findByValue(iprot.readI32());
        struct.setWeekdayIsSet(true);
      }
    }
  }

}

