/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PassengerLimit implements org.apache.thrift.TBase<PassengerLimit, PassengerLimit._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PassengerLimit");

  private static final org.apache.thrift.protocol.TField PASSENGER_AGE_LIMIT_ITEM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("passengerAgeLimitItemList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PASSENGER_NUM_LIMIT_ITEM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("passengerNumLimitItemList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PassengerLimitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PassengerLimitTupleSchemeFactory());
  }

  public List<com.travelzen.farerule.rule.PassengerAgeLimitItem> passengerAgeLimitItemList; // optional
  public List<com.travelzen.farerule.rule.PassengerNumLimitItem> passengerNumLimitItemList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PASSENGER_AGE_LIMIT_ITEM_LIST((short)1, "passengerAgeLimitItemList"),
    PASSENGER_NUM_LIMIT_ITEM_LIST((short)2, "passengerNumLimitItemList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PASSENGER_AGE_LIMIT_ITEM_LIST
          return PASSENGER_AGE_LIMIT_ITEM_LIST;
        case 2: // PASSENGER_NUM_LIMIT_ITEM_LIST
          return PASSENGER_NUM_LIMIT_ITEM_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PASSENGER_AGE_LIMIT_ITEM_LIST,_Fields.PASSENGER_NUM_LIMIT_ITEM_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PASSENGER_AGE_LIMIT_ITEM_LIST, new org.apache.thrift.meta_data.FieldMetaData("passengerAgeLimitItemList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.farerule.rule.PassengerAgeLimitItem.class))));
    tmpMap.put(_Fields.PASSENGER_NUM_LIMIT_ITEM_LIST, new org.apache.thrift.meta_data.FieldMetaData("passengerNumLimitItemList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.farerule.rule.PassengerNumLimitItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PassengerLimit.class, metaDataMap);
  }

  public PassengerLimit() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PassengerLimit(PassengerLimit other) {
    if (other.isSetPassengerAgeLimitItemList()) {
      List<com.travelzen.farerule.rule.PassengerAgeLimitItem> __this__passengerAgeLimitItemList = new ArrayList<com.travelzen.farerule.rule.PassengerAgeLimitItem>();
      for (com.travelzen.farerule.rule.PassengerAgeLimitItem other_element : other.passengerAgeLimitItemList) {
        __this__passengerAgeLimitItemList.add(new com.travelzen.farerule.rule.PassengerAgeLimitItem(other_element));
      }
      this.passengerAgeLimitItemList = __this__passengerAgeLimitItemList;
    }
    if (other.isSetPassengerNumLimitItemList()) {
      List<com.travelzen.farerule.rule.PassengerNumLimitItem> __this__passengerNumLimitItemList = new ArrayList<com.travelzen.farerule.rule.PassengerNumLimitItem>();
      for (com.travelzen.farerule.rule.PassengerNumLimitItem other_element : other.passengerNumLimitItemList) {
        __this__passengerNumLimitItemList.add(new com.travelzen.farerule.rule.PassengerNumLimitItem(other_element));
      }
      this.passengerNumLimitItemList = __this__passengerNumLimitItemList;
    }
  }

  public PassengerLimit deepCopy() {
    return new PassengerLimit(this);
  }

  @Override
  public void clear() {
    this.passengerAgeLimitItemList = null;
    this.passengerNumLimitItemList = null;
  }

  public int getPassengerAgeLimitItemListSize() {
    return (this.passengerAgeLimitItemList == null) ? 0 : this.passengerAgeLimitItemList.size();
  }

  public java.util.Iterator<com.travelzen.farerule.rule.PassengerAgeLimitItem> getPassengerAgeLimitItemListIterator() {
    return (this.passengerAgeLimitItemList == null) ? null : this.passengerAgeLimitItemList.iterator();
  }

  public void addToPassengerAgeLimitItemList(com.travelzen.farerule.rule.PassengerAgeLimitItem elem) {
    if (this.passengerAgeLimitItemList == null) {
      this.passengerAgeLimitItemList = new ArrayList<com.travelzen.farerule.rule.PassengerAgeLimitItem>();
    }
    this.passengerAgeLimitItemList.add(elem);
  }

  public List<com.travelzen.farerule.rule.PassengerAgeLimitItem> getPassengerAgeLimitItemList() {
    return this.passengerAgeLimitItemList;
  }

  public PassengerLimit setPassengerAgeLimitItemList(List<com.travelzen.farerule.rule.PassengerAgeLimitItem> passengerAgeLimitItemList) {
    this.passengerAgeLimitItemList = passengerAgeLimitItemList;
    return this;
  }

  public void unsetPassengerAgeLimitItemList() {
    this.passengerAgeLimitItemList = null;
  }

  /** Returns true if field passengerAgeLimitItemList is set (has been assigned a value) and false otherwise */
  public boolean isSetPassengerAgeLimitItemList() {
    return this.passengerAgeLimitItemList != null;
  }

  public void setPassengerAgeLimitItemListIsSet(boolean value) {
    if (!value) {
      this.passengerAgeLimitItemList = null;
    }
  }

  public int getPassengerNumLimitItemListSize() {
    return (this.passengerNumLimitItemList == null) ? 0 : this.passengerNumLimitItemList.size();
  }

  public java.util.Iterator<com.travelzen.farerule.rule.PassengerNumLimitItem> getPassengerNumLimitItemListIterator() {
    return (this.passengerNumLimitItemList == null) ? null : this.passengerNumLimitItemList.iterator();
  }

  public void addToPassengerNumLimitItemList(com.travelzen.farerule.rule.PassengerNumLimitItem elem) {
    if (this.passengerNumLimitItemList == null) {
      this.passengerNumLimitItemList = new ArrayList<com.travelzen.farerule.rule.PassengerNumLimitItem>();
    }
    this.passengerNumLimitItemList.add(elem);
  }

  public List<com.travelzen.farerule.rule.PassengerNumLimitItem> getPassengerNumLimitItemList() {
    return this.passengerNumLimitItemList;
  }

  public PassengerLimit setPassengerNumLimitItemList(List<com.travelzen.farerule.rule.PassengerNumLimitItem> passengerNumLimitItemList) {
    this.passengerNumLimitItemList = passengerNumLimitItemList;
    return this;
  }

  public void unsetPassengerNumLimitItemList() {
    this.passengerNumLimitItemList = null;
  }

  /** Returns true if field passengerNumLimitItemList is set (has been assigned a value) and false otherwise */
  public boolean isSetPassengerNumLimitItemList() {
    return this.passengerNumLimitItemList != null;
  }

  public void setPassengerNumLimitItemListIsSet(boolean value) {
    if (!value) {
      this.passengerNumLimitItemList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PASSENGER_AGE_LIMIT_ITEM_LIST:
      if (value == null) {
        unsetPassengerAgeLimitItemList();
      } else {
        setPassengerAgeLimitItemList((List<com.travelzen.farerule.rule.PassengerAgeLimitItem>)value);
      }
      break;

    case PASSENGER_NUM_LIMIT_ITEM_LIST:
      if (value == null) {
        unsetPassengerNumLimitItemList();
      } else {
        setPassengerNumLimitItemList((List<com.travelzen.farerule.rule.PassengerNumLimitItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PASSENGER_AGE_LIMIT_ITEM_LIST:
      return getPassengerAgeLimitItemList();

    case PASSENGER_NUM_LIMIT_ITEM_LIST:
      return getPassengerNumLimitItemList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PASSENGER_AGE_LIMIT_ITEM_LIST:
      return isSetPassengerAgeLimitItemList();
    case PASSENGER_NUM_LIMIT_ITEM_LIST:
      return isSetPassengerNumLimitItemList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PassengerLimit)
      return this.equals((PassengerLimit)that);
    return false;
  }

  public boolean equals(PassengerLimit that) {
    if (that == null)
      return false;

    boolean this_present_passengerAgeLimitItemList = true && this.isSetPassengerAgeLimitItemList();
    boolean that_present_passengerAgeLimitItemList = true && that.isSetPassengerAgeLimitItemList();
    if (this_present_passengerAgeLimitItemList || that_present_passengerAgeLimitItemList) {
      if (!(this_present_passengerAgeLimitItemList && that_present_passengerAgeLimitItemList))
        return false;
      if (!this.passengerAgeLimitItemList.equals(that.passengerAgeLimitItemList))
        return false;
    }

    boolean this_present_passengerNumLimitItemList = true && this.isSetPassengerNumLimitItemList();
    boolean that_present_passengerNumLimitItemList = true && that.isSetPassengerNumLimitItemList();
    if (this_present_passengerNumLimitItemList || that_present_passengerNumLimitItemList) {
      if (!(this_present_passengerNumLimitItemList && that_present_passengerNumLimitItemList))
        return false;
      if (!this.passengerNumLimitItemList.equals(that.passengerNumLimitItemList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PassengerLimit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PassengerLimit typedOther = (PassengerLimit)other;

    lastComparison = Boolean.valueOf(isSetPassengerAgeLimitItemList()).compareTo(typedOther.isSetPassengerAgeLimitItemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassengerAgeLimitItemList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passengerAgeLimitItemList, typedOther.passengerAgeLimitItemList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassengerNumLimitItemList()).compareTo(typedOther.isSetPassengerNumLimitItemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassengerNumLimitItemList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passengerNumLimitItemList, typedOther.passengerNumLimitItemList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PassengerLimit(");
    boolean first = true;

    if (isSetPassengerAgeLimitItemList()) {
      sb.append("passengerAgeLimitItemList:");
      if (this.passengerAgeLimitItemList == null) {
        sb.append("null");
      } else {
        sb.append(this.passengerAgeLimitItemList);
      }
      first = false;
    }
    if (isSetPassengerNumLimitItemList()) {
      if (!first) sb.append(", ");
      sb.append("passengerNumLimitItemList:");
      if (this.passengerNumLimitItemList == null) {
        sb.append("null");
      } else {
        sb.append(this.passengerNumLimitItemList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PassengerLimitStandardSchemeFactory implements SchemeFactory {
    public PassengerLimitStandardScheme getScheme() {
      return new PassengerLimitStandardScheme();
    }
  }

  private static class PassengerLimitStandardScheme extends StandardScheme<PassengerLimit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PassengerLimit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PASSENGER_AGE_LIMIT_ITEM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.passengerAgeLimitItemList = new ArrayList<com.travelzen.farerule.rule.PassengerAgeLimitItem>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.travelzen.farerule.rule.PassengerAgeLimitItem _elem2; // required
                  _elem2 = new com.travelzen.farerule.rule.PassengerAgeLimitItem();
                  _elem2.read(iprot);
                  struct.passengerAgeLimitItemList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPassengerAgeLimitItemListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASSENGER_NUM_LIMIT_ITEM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.passengerNumLimitItemList = new ArrayList<com.travelzen.farerule.rule.PassengerNumLimitItem>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  com.travelzen.farerule.rule.PassengerNumLimitItem _elem5; // required
                  _elem5 = new com.travelzen.farerule.rule.PassengerNumLimitItem();
                  _elem5.read(iprot);
                  struct.passengerNumLimitItemList.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setPassengerNumLimitItemListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PassengerLimit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.passengerAgeLimitItemList != null) {
        if (struct.isSetPassengerAgeLimitItemList()) {
          oprot.writeFieldBegin(PASSENGER_AGE_LIMIT_ITEM_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.passengerAgeLimitItemList.size()));
            for (com.travelzen.farerule.rule.PassengerAgeLimitItem _iter6 : struct.passengerAgeLimitItemList)
            {
              _iter6.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.passengerNumLimitItemList != null) {
        if (struct.isSetPassengerNumLimitItemList()) {
          oprot.writeFieldBegin(PASSENGER_NUM_LIMIT_ITEM_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.passengerNumLimitItemList.size()));
            for (com.travelzen.farerule.rule.PassengerNumLimitItem _iter7 : struct.passengerNumLimitItemList)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PassengerLimitTupleSchemeFactory implements SchemeFactory {
    public PassengerLimitTupleScheme getScheme() {
      return new PassengerLimitTupleScheme();
    }
  }

  private static class PassengerLimitTupleScheme extends TupleScheme<PassengerLimit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PassengerLimit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPassengerAgeLimitItemList()) {
        optionals.set(0);
      }
      if (struct.isSetPassengerNumLimitItemList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPassengerAgeLimitItemList()) {
        {
          oprot.writeI32(struct.passengerAgeLimitItemList.size());
          for (com.travelzen.farerule.rule.PassengerAgeLimitItem _iter8 : struct.passengerAgeLimitItemList)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetPassengerNumLimitItemList()) {
        {
          oprot.writeI32(struct.passengerNumLimitItemList.size());
          for (com.travelzen.farerule.rule.PassengerNumLimitItem _iter9 : struct.passengerNumLimitItemList)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PassengerLimit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.passengerAgeLimitItemList = new ArrayList<com.travelzen.farerule.rule.PassengerAgeLimitItem>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            com.travelzen.farerule.rule.PassengerAgeLimitItem _elem12; // required
            _elem12 = new com.travelzen.farerule.rule.PassengerAgeLimitItem();
            _elem12.read(iprot);
            struct.passengerAgeLimitItemList.add(_elem12);
          }
        }
        struct.setPassengerAgeLimitItemListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.passengerNumLimitItemList = new ArrayList<com.travelzen.farerule.rule.PassengerNumLimitItem>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            com.travelzen.farerule.rule.PassengerNumLimitItem _elem15; // required
            _elem15 = new com.travelzen.farerule.rule.PassengerNumLimitItem();
            _elem15.read(iprot);
            struct.passengerNumLimitItemList.add(_elem15);
          }
        }
        struct.setPassengerNumLimitItemListIsSet(true);
      }
    }
  }

}

