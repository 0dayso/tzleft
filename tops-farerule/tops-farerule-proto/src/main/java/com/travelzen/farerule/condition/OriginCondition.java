/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule.condition;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OriginCondition implements org.apache.thrift.TBase<OriginCondition, OriginCondition._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OriginCondition");

  private static final org.apache.thrift.protocol.TField ORIGIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("originType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OriginConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OriginConditionTupleSchemeFactory());
  }

  /**
   * 
   * @see OriginTypeEnum
   */
  public OriginTypeEnum originType; // required
  public String location; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see OriginTypeEnum
     */
    ORIGIN_TYPE((short)1, "originType"),
    LOCATION((short)2, "location");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORIGIN_TYPE
          return ORIGIN_TYPE;
        case 2: // LOCATION
          return LOCATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.LOCATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORIGIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("originType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OriginTypeEnum.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OriginCondition.class, metaDataMap);
  }

  public OriginCondition() {
  }

  public OriginCondition(
    OriginTypeEnum originType)
  {
    this();
    this.originType = originType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OriginCondition(OriginCondition other) {
    if (other.isSetOriginType()) {
      this.originType = other.originType;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
  }

  public OriginCondition deepCopy() {
    return new OriginCondition(this);
  }

  @Override
  public void clear() {
    this.originType = null;
    this.location = null;
  }

  /**
   * 
   * @see OriginTypeEnum
   */
  public OriginTypeEnum getOriginType() {
    return this.originType;
  }

  /**
   * 
   * @see OriginTypeEnum
   */
  public OriginCondition setOriginType(OriginTypeEnum originType) {
    this.originType = originType;
    return this;
  }

  public void unsetOriginType() {
    this.originType = null;
  }

  /** Returns true if field originType is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginType() {
    return this.originType != null;
  }

  public void setOriginTypeIsSet(boolean value) {
    if (!value) {
      this.originType = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public OriginCondition setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORIGIN_TYPE:
      if (value == null) {
        unsetOriginType();
      } else {
        setOriginType((OriginTypeEnum)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORIGIN_TYPE:
      return getOriginType();

    case LOCATION:
      return getLocation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORIGIN_TYPE:
      return isSetOriginType();
    case LOCATION:
      return isSetLocation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OriginCondition)
      return this.equals((OriginCondition)that);
    return false;
  }

  public boolean equals(OriginCondition that) {
    if (that == null)
      return false;

    boolean this_present_originType = true && this.isSetOriginType();
    boolean that_present_originType = true && that.isSetOriginType();
    if (this_present_originType || that_present_originType) {
      if (!(this_present_originType && that_present_originType))
        return false;
      if (!this.originType.equals(that.originType))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(OriginCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OriginCondition typedOther = (OriginCondition)other;

    lastComparison = Boolean.valueOf(isSetOriginType()).compareTo(typedOther.isSetOriginType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originType, typedOther.originType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OriginCondition(");
    boolean first = true;

    sb.append("originType:");
    if (this.originType == null) {
      sb.append("null");
    } else {
      sb.append(this.originType);
    }
    first = false;
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (originType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'originType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OriginConditionStandardSchemeFactory implements SchemeFactory {
    public OriginConditionStandardScheme getScheme() {
      return new OriginConditionStandardScheme();
    }
  }

  private static class OriginConditionStandardScheme extends StandardScheme<OriginCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OriginCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORIGIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.originType = OriginTypeEnum.findByValue(iprot.readI32());
              struct.setOriginTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OriginCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.originType != null) {
        oprot.writeFieldBegin(ORIGIN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.originType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OriginConditionTupleSchemeFactory implements SchemeFactory {
    public OriginConditionTupleScheme getScheme() {
      return new OriginConditionTupleScheme();
    }
  }

  private static class OriginConditionTupleScheme extends TupleScheme<OriginCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OriginCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.originType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetLocation()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OriginCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.originType = OriginTypeEnum.findByValue(iprot.readI32());
      struct.setOriginTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
    }
  }

}

