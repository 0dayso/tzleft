/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Penalties implements org.apache.thrift.TBase<Penalties, Penalties._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Penalties");

  private static final org.apache.thrift.protocol.TField PENALTIES_ITEM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("penaltiesItemList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PENALTIES_CANCEL_REMARK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("penaltiesCancelRemarkList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PENALTIES_CHANGE_REMARK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("penaltiesChangeRemarkList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PenaltiesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PenaltiesTupleSchemeFactory());
  }

  public List<com.travelzen.farerule.rule.PenaltiesItem> penaltiesItemList; // optional
  public List<com.travelzen.farerule.rule.PenaltiesRemark> penaltiesCancelRemarkList; // optional
  public List<com.travelzen.farerule.rule.PenaltiesRemark> penaltiesChangeRemarkList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PENALTIES_ITEM_LIST((short)1, "penaltiesItemList"),
    PENALTIES_CANCEL_REMARK_LIST((short)2, "penaltiesCancelRemarkList"),
    PENALTIES_CHANGE_REMARK_LIST((short)3, "penaltiesChangeRemarkList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PENALTIES_ITEM_LIST
          return PENALTIES_ITEM_LIST;
        case 2: // PENALTIES_CANCEL_REMARK_LIST
          return PENALTIES_CANCEL_REMARK_LIST;
        case 3: // PENALTIES_CHANGE_REMARK_LIST
          return PENALTIES_CHANGE_REMARK_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PENALTIES_ITEM_LIST,_Fields.PENALTIES_CANCEL_REMARK_LIST,_Fields.PENALTIES_CHANGE_REMARK_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PENALTIES_ITEM_LIST, new org.apache.thrift.meta_data.FieldMetaData("penaltiesItemList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.farerule.rule.PenaltiesItem.class))));
    tmpMap.put(_Fields.PENALTIES_CANCEL_REMARK_LIST, new org.apache.thrift.meta_data.FieldMetaData("penaltiesCancelRemarkList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.farerule.rule.PenaltiesRemark.class))));
    tmpMap.put(_Fields.PENALTIES_CHANGE_REMARK_LIST, new org.apache.thrift.meta_data.FieldMetaData("penaltiesChangeRemarkList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.farerule.rule.PenaltiesRemark.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Penalties.class, metaDataMap);
  }

  public Penalties() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Penalties(Penalties other) {
    if (other.isSetPenaltiesItemList()) {
      List<com.travelzen.farerule.rule.PenaltiesItem> __this__penaltiesItemList = new ArrayList<com.travelzen.farerule.rule.PenaltiesItem>();
      for (com.travelzen.farerule.rule.PenaltiesItem other_element : other.penaltiesItemList) {
        __this__penaltiesItemList.add(new com.travelzen.farerule.rule.PenaltiesItem(other_element));
      }
      this.penaltiesItemList = __this__penaltiesItemList;
    }
    if (other.isSetPenaltiesCancelRemarkList()) {
      List<com.travelzen.farerule.rule.PenaltiesRemark> __this__penaltiesCancelRemarkList = new ArrayList<com.travelzen.farerule.rule.PenaltiesRemark>();
      for (com.travelzen.farerule.rule.PenaltiesRemark other_element : other.penaltiesCancelRemarkList) {
        __this__penaltiesCancelRemarkList.add(new com.travelzen.farerule.rule.PenaltiesRemark(other_element));
      }
      this.penaltiesCancelRemarkList = __this__penaltiesCancelRemarkList;
    }
    if (other.isSetPenaltiesChangeRemarkList()) {
      List<com.travelzen.farerule.rule.PenaltiesRemark> __this__penaltiesChangeRemarkList = new ArrayList<com.travelzen.farerule.rule.PenaltiesRemark>();
      for (com.travelzen.farerule.rule.PenaltiesRemark other_element : other.penaltiesChangeRemarkList) {
        __this__penaltiesChangeRemarkList.add(new com.travelzen.farerule.rule.PenaltiesRemark(other_element));
      }
      this.penaltiesChangeRemarkList = __this__penaltiesChangeRemarkList;
    }
  }

  public Penalties deepCopy() {
    return new Penalties(this);
  }

  @Override
  public void clear() {
    this.penaltiesItemList = null;
    this.penaltiesCancelRemarkList = null;
    this.penaltiesChangeRemarkList = null;
  }

  public int getPenaltiesItemListSize() {
    return (this.penaltiesItemList == null) ? 0 : this.penaltiesItemList.size();
  }

  public java.util.Iterator<com.travelzen.farerule.rule.PenaltiesItem> getPenaltiesItemListIterator() {
    return (this.penaltiesItemList == null) ? null : this.penaltiesItemList.iterator();
  }

  public void addToPenaltiesItemList(com.travelzen.farerule.rule.PenaltiesItem elem) {
    if (this.penaltiesItemList == null) {
      this.penaltiesItemList = new ArrayList<com.travelzen.farerule.rule.PenaltiesItem>();
    }
    this.penaltiesItemList.add(elem);
  }

  public List<com.travelzen.farerule.rule.PenaltiesItem> getPenaltiesItemList() {
    return this.penaltiesItemList;
  }

  public Penalties setPenaltiesItemList(List<com.travelzen.farerule.rule.PenaltiesItem> penaltiesItemList) {
    this.penaltiesItemList = penaltiesItemList;
    return this;
  }

  public void unsetPenaltiesItemList() {
    this.penaltiesItemList = null;
  }

  /** Returns true if field penaltiesItemList is set (has been assigned a value) and false otherwise */
  public boolean isSetPenaltiesItemList() {
    return this.penaltiesItemList != null;
  }

  public void setPenaltiesItemListIsSet(boolean value) {
    if (!value) {
      this.penaltiesItemList = null;
    }
  }

  public int getPenaltiesCancelRemarkListSize() {
    return (this.penaltiesCancelRemarkList == null) ? 0 : this.penaltiesCancelRemarkList.size();
  }

  public java.util.Iterator<com.travelzen.farerule.rule.PenaltiesRemark> getPenaltiesCancelRemarkListIterator() {
    return (this.penaltiesCancelRemarkList == null) ? null : this.penaltiesCancelRemarkList.iterator();
  }

  public void addToPenaltiesCancelRemarkList(com.travelzen.farerule.rule.PenaltiesRemark elem) {
    if (this.penaltiesCancelRemarkList == null) {
      this.penaltiesCancelRemarkList = new ArrayList<com.travelzen.farerule.rule.PenaltiesRemark>();
    }
    this.penaltiesCancelRemarkList.add(elem);
  }

  public List<com.travelzen.farerule.rule.PenaltiesRemark> getPenaltiesCancelRemarkList() {
    return this.penaltiesCancelRemarkList;
  }

  public Penalties setPenaltiesCancelRemarkList(List<com.travelzen.farerule.rule.PenaltiesRemark> penaltiesCancelRemarkList) {
    this.penaltiesCancelRemarkList = penaltiesCancelRemarkList;
    return this;
  }

  public void unsetPenaltiesCancelRemarkList() {
    this.penaltiesCancelRemarkList = null;
  }

  /** Returns true if field penaltiesCancelRemarkList is set (has been assigned a value) and false otherwise */
  public boolean isSetPenaltiesCancelRemarkList() {
    return this.penaltiesCancelRemarkList != null;
  }

  public void setPenaltiesCancelRemarkListIsSet(boolean value) {
    if (!value) {
      this.penaltiesCancelRemarkList = null;
    }
  }

  public int getPenaltiesChangeRemarkListSize() {
    return (this.penaltiesChangeRemarkList == null) ? 0 : this.penaltiesChangeRemarkList.size();
  }

  public java.util.Iterator<com.travelzen.farerule.rule.PenaltiesRemark> getPenaltiesChangeRemarkListIterator() {
    return (this.penaltiesChangeRemarkList == null) ? null : this.penaltiesChangeRemarkList.iterator();
  }

  public void addToPenaltiesChangeRemarkList(com.travelzen.farerule.rule.PenaltiesRemark elem) {
    if (this.penaltiesChangeRemarkList == null) {
      this.penaltiesChangeRemarkList = new ArrayList<com.travelzen.farerule.rule.PenaltiesRemark>();
    }
    this.penaltiesChangeRemarkList.add(elem);
  }

  public List<com.travelzen.farerule.rule.PenaltiesRemark> getPenaltiesChangeRemarkList() {
    return this.penaltiesChangeRemarkList;
  }

  public Penalties setPenaltiesChangeRemarkList(List<com.travelzen.farerule.rule.PenaltiesRemark> penaltiesChangeRemarkList) {
    this.penaltiesChangeRemarkList = penaltiesChangeRemarkList;
    return this;
  }

  public void unsetPenaltiesChangeRemarkList() {
    this.penaltiesChangeRemarkList = null;
  }

  /** Returns true if field penaltiesChangeRemarkList is set (has been assigned a value) and false otherwise */
  public boolean isSetPenaltiesChangeRemarkList() {
    return this.penaltiesChangeRemarkList != null;
  }

  public void setPenaltiesChangeRemarkListIsSet(boolean value) {
    if (!value) {
      this.penaltiesChangeRemarkList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PENALTIES_ITEM_LIST:
      if (value == null) {
        unsetPenaltiesItemList();
      } else {
        setPenaltiesItemList((List<com.travelzen.farerule.rule.PenaltiesItem>)value);
      }
      break;

    case PENALTIES_CANCEL_REMARK_LIST:
      if (value == null) {
        unsetPenaltiesCancelRemarkList();
      } else {
        setPenaltiesCancelRemarkList((List<com.travelzen.farerule.rule.PenaltiesRemark>)value);
      }
      break;

    case PENALTIES_CHANGE_REMARK_LIST:
      if (value == null) {
        unsetPenaltiesChangeRemarkList();
      } else {
        setPenaltiesChangeRemarkList((List<com.travelzen.farerule.rule.PenaltiesRemark>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PENALTIES_ITEM_LIST:
      return getPenaltiesItemList();

    case PENALTIES_CANCEL_REMARK_LIST:
      return getPenaltiesCancelRemarkList();

    case PENALTIES_CHANGE_REMARK_LIST:
      return getPenaltiesChangeRemarkList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PENALTIES_ITEM_LIST:
      return isSetPenaltiesItemList();
    case PENALTIES_CANCEL_REMARK_LIST:
      return isSetPenaltiesCancelRemarkList();
    case PENALTIES_CHANGE_REMARK_LIST:
      return isSetPenaltiesChangeRemarkList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Penalties)
      return this.equals((Penalties)that);
    return false;
  }

  public boolean equals(Penalties that) {
    if (that == null)
      return false;

    boolean this_present_penaltiesItemList = true && this.isSetPenaltiesItemList();
    boolean that_present_penaltiesItemList = true && that.isSetPenaltiesItemList();
    if (this_present_penaltiesItemList || that_present_penaltiesItemList) {
      if (!(this_present_penaltiesItemList && that_present_penaltiesItemList))
        return false;
      if (!this.penaltiesItemList.equals(that.penaltiesItemList))
        return false;
    }

    boolean this_present_penaltiesCancelRemarkList = true && this.isSetPenaltiesCancelRemarkList();
    boolean that_present_penaltiesCancelRemarkList = true && that.isSetPenaltiesCancelRemarkList();
    if (this_present_penaltiesCancelRemarkList || that_present_penaltiesCancelRemarkList) {
      if (!(this_present_penaltiesCancelRemarkList && that_present_penaltiesCancelRemarkList))
        return false;
      if (!this.penaltiesCancelRemarkList.equals(that.penaltiesCancelRemarkList))
        return false;
    }

    boolean this_present_penaltiesChangeRemarkList = true && this.isSetPenaltiesChangeRemarkList();
    boolean that_present_penaltiesChangeRemarkList = true && that.isSetPenaltiesChangeRemarkList();
    if (this_present_penaltiesChangeRemarkList || that_present_penaltiesChangeRemarkList) {
      if (!(this_present_penaltiesChangeRemarkList && that_present_penaltiesChangeRemarkList))
        return false;
      if (!this.penaltiesChangeRemarkList.equals(that.penaltiesChangeRemarkList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Penalties other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Penalties typedOther = (Penalties)other;

    lastComparison = Boolean.valueOf(isSetPenaltiesItemList()).compareTo(typedOther.isSetPenaltiesItemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenaltiesItemList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penaltiesItemList, typedOther.penaltiesItemList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPenaltiesCancelRemarkList()).compareTo(typedOther.isSetPenaltiesCancelRemarkList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenaltiesCancelRemarkList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penaltiesCancelRemarkList, typedOther.penaltiesCancelRemarkList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPenaltiesChangeRemarkList()).compareTo(typedOther.isSetPenaltiesChangeRemarkList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenaltiesChangeRemarkList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penaltiesChangeRemarkList, typedOther.penaltiesChangeRemarkList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Penalties(");
    boolean first = true;

    if (isSetPenaltiesItemList()) {
      sb.append("penaltiesItemList:");
      if (this.penaltiesItemList == null) {
        sb.append("null");
      } else {
        sb.append(this.penaltiesItemList);
      }
      first = false;
    }
    if (isSetPenaltiesCancelRemarkList()) {
      if (!first) sb.append(", ");
      sb.append("penaltiesCancelRemarkList:");
      if (this.penaltiesCancelRemarkList == null) {
        sb.append("null");
      } else {
        sb.append(this.penaltiesCancelRemarkList);
      }
      first = false;
    }
    if (isSetPenaltiesChangeRemarkList()) {
      if (!first) sb.append(", ");
      sb.append("penaltiesChangeRemarkList:");
      if (this.penaltiesChangeRemarkList == null) {
        sb.append("null");
      } else {
        sb.append(this.penaltiesChangeRemarkList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PenaltiesStandardSchemeFactory implements SchemeFactory {
    public PenaltiesStandardScheme getScheme() {
      return new PenaltiesStandardScheme();
    }
  }

  private static class PenaltiesStandardScheme extends StandardScheme<Penalties> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Penalties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PENALTIES_ITEM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.penaltiesItemList = new ArrayList<com.travelzen.farerule.rule.PenaltiesItem>(_list64.size);
                for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                {
                  com.travelzen.farerule.rule.PenaltiesItem _elem66; // required
                  _elem66 = new com.travelzen.farerule.rule.PenaltiesItem();
                  _elem66.read(iprot);
                  struct.penaltiesItemList.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setPenaltiesItemListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PENALTIES_CANCEL_REMARK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.penaltiesCancelRemarkList = new ArrayList<com.travelzen.farerule.rule.PenaltiesRemark>(_list67.size);
                for (int _i68 = 0; _i68 < _list67.size; ++_i68)
                {
                  com.travelzen.farerule.rule.PenaltiesRemark _elem69; // required
                  _elem69 = new com.travelzen.farerule.rule.PenaltiesRemark();
                  _elem69.read(iprot);
                  struct.penaltiesCancelRemarkList.add(_elem69);
                }
                iprot.readListEnd();
              }
              struct.setPenaltiesCancelRemarkListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PENALTIES_CHANGE_REMARK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.penaltiesChangeRemarkList = new ArrayList<com.travelzen.farerule.rule.PenaltiesRemark>(_list70.size);
                for (int _i71 = 0; _i71 < _list70.size; ++_i71)
                {
                  com.travelzen.farerule.rule.PenaltiesRemark _elem72; // required
                  _elem72 = new com.travelzen.farerule.rule.PenaltiesRemark();
                  _elem72.read(iprot);
                  struct.penaltiesChangeRemarkList.add(_elem72);
                }
                iprot.readListEnd();
              }
              struct.setPenaltiesChangeRemarkListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Penalties struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.penaltiesItemList != null) {
        if (struct.isSetPenaltiesItemList()) {
          oprot.writeFieldBegin(PENALTIES_ITEM_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.penaltiesItemList.size()));
            for (com.travelzen.farerule.rule.PenaltiesItem _iter73 : struct.penaltiesItemList)
            {
              _iter73.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.penaltiesCancelRemarkList != null) {
        if (struct.isSetPenaltiesCancelRemarkList()) {
          oprot.writeFieldBegin(PENALTIES_CANCEL_REMARK_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.penaltiesCancelRemarkList.size()));
            for (com.travelzen.farerule.rule.PenaltiesRemark _iter74 : struct.penaltiesCancelRemarkList)
            {
              _iter74.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.penaltiesChangeRemarkList != null) {
        if (struct.isSetPenaltiesChangeRemarkList()) {
          oprot.writeFieldBegin(PENALTIES_CHANGE_REMARK_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.penaltiesChangeRemarkList.size()));
            for (com.travelzen.farerule.rule.PenaltiesRemark _iter75 : struct.penaltiesChangeRemarkList)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PenaltiesTupleSchemeFactory implements SchemeFactory {
    public PenaltiesTupleScheme getScheme() {
      return new PenaltiesTupleScheme();
    }
  }

  private static class PenaltiesTupleScheme extends TupleScheme<Penalties> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Penalties struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPenaltiesItemList()) {
        optionals.set(0);
      }
      if (struct.isSetPenaltiesCancelRemarkList()) {
        optionals.set(1);
      }
      if (struct.isSetPenaltiesChangeRemarkList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPenaltiesItemList()) {
        {
          oprot.writeI32(struct.penaltiesItemList.size());
          for (com.travelzen.farerule.rule.PenaltiesItem _iter76 : struct.penaltiesItemList)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetPenaltiesCancelRemarkList()) {
        {
          oprot.writeI32(struct.penaltiesCancelRemarkList.size());
          for (com.travelzen.farerule.rule.PenaltiesRemark _iter77 : struct.penaltiesCancelRemarkList)
          {
            _iter77.write(oprot);
          }
        }
      }
      if (struct.isSetPenaltiesChangeRemarkList()) {
        {
          oprot.writeI32(struct.penaltiesChangeRemarkList.size());
          for (com.travelzen.farerule.rule.PenaltiesRemark _iter78 : struct.penaltiesChangeRemarkList)
          {
            _iter78.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Penalties struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.penaltiesItemList = new ArrayList<com.travelzen.farerule.rule.PenaltiesItem>(_list79.size);
          for (int _i80 = 0; _i80 < _list79.size; ++_i80)
          {
            com.travelzen.farerule.rule.PenaltiesItem _elem81; // required
            _elem81 = new com.travelzen.farerule.rule.PenaltiesItem();
            _elem81.read(iprot);
            struct.penaltiesItemList.add(_elem81);
          }
        }
        struct.setPenaltiesItemListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.penaltiesCancelRemarkList = new ArrayList<com.travelzen.farerule.rule.PenaltiesRemark>(_list82.size);
          for (int _i83 = 0; _i83 < _list82.size; ++_i83)
          {
            com.travelzen.farerule.rule.PenaltiesRemark _elem84; // required
            _elem84 = new com.travelzen.farerule.rule.PenaltiesRemark();
            _elem84.read(iprot);
            struct.penaltiesCancelRemarkList.add(_elem84);
          }
        }
        struct.setPenaltiesCancelRemarkListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.penaltiesChangeRemarkList = new ArrayList<com.travelzen.farerule.rule.PenaltiesRemark>(_list85.size);
          for (int _i86 = 0; _i86 < _list85.size; ++_i86)
          {
            com.travelzen.farerule.rule.PenaltiesRemark _elem87; // required
            _elem87 = new com.travelzen.farerule.rule.PenaltiesRemark();
            _elem87.read(iprot);
            struct.penaltiesChangeRemarkList.add(_elem87);
          }
        }
        struct.setPenaltiesChangeRemarkListIsSet(true);
      }
    }
  }

}

