/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule.jpecker.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DisplayRule implements org.apache.thrift.TBase<DisplayRule, DisplayRule._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisplayRule");

  private static final org.apache.thrift.protocol.TField MIN_STAY_FIELD_DESC = new org.apache.thrift.protocol.TField("minStay", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MAX_STAY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxStay", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STOPOVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("stopovers", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRAVEL_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("travelDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PENALTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("penalties", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)100);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DisplayRuleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DisplayRuleTupleSchemeFactory());
  }

  public String minStay; // optional
  public String maxStay; // optional
  public String stopovers; // optional
  public String travelDate; // optional
  public String penalties; // optional
  public String id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MIN_STAY((short)6, "minStay"),
    MAX_STAY((short)7, "maxStay"),
    STOPOVERS((short)8, "stopovers"),
    TRAVEL_DATE((short)14, "travelDate"),
    PENALTIES((short)16, "penalties"),
    ID((short)100, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 6: // MIN_STAY
          return MIN_STAY;
        case 7: // MAX_STAY
          return MAX_STAY;
        case 8: // STOPOVERS
          return STOPOVERS;
        case 14: // TRAVEL_DATE
          return TRAVEL_DATE;
        case 16: // PENALTIES
          return PENALTIES;
        case 100: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.MIN_STAY,_Fields.MAX_STAY,_Fields.STOPOVERS,_Fields.TRAVEL_DATE,_Fields.PENALTIES,_Fields.ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MIN_STAY, new org.apache.thrift.meta_data.FieldMetaData("minStay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_STAY, new org.apache.thrift.meta_data.FieldMetaData("maxStay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOPOVERS, new org.apache.thrift.meta_data.FieldMetaData("stopovers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRAVEL_DATE, new org.apache.thrift.meta_data.FieldMetaData("travelDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PENALTIES, new org.apache.thrift.meta_data.FieldMetaData("penalties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisplayRule.class, metaDataMap);
  }

  public DisplayRule() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DisplayRule(DisplayRule other) {
    if (other.isSetMinStay()) {
      this.minStay = other.minStay;
    }
    if (other.isSetMaxStay()) {
      this.maxStay = other.maxStay;
    }
    if (other.isSetStopovers()) {
      this.stopovers = other.stopovers;
    }
    if (other.isSetTravelDate()) {
      this.travelDate = other.travelDate;
    }
    if (other.isSetPenalties()) {
      this.penalties = other.penalties;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
  }

  public DisplayRule deepCopy() {
    return new DisplayRule(this);
  }

  @Override
  public void clear() {
    this.minStay = null;
    this.maxStay = null;
    this.stopovers = null;
    this.travelDate = null;
    this.penalties = null;
    this.id = null;
  }

  public String getMinStay() {
    return this.minStay;
  }

  public DisplayRule setMinStay(String minStay) {
    this.minStay = minStay;
    return this;
  }

  public void unsetMinStay() {
    this.minStay = null;
  }

  /** Returns true if field minStay is set (has been assigned a value) and false otherwise */
  public boolean isSetMinStay() {
    return this.minStay != null;
  }

  public void setMinStayIsSet(boolean value) {
    if (!value) {
      this.minStay = null;
    }
  }

  public String getMaxStay() {
    return this.maxStay;
  }

  public DisplayRule setMaxStay(String maxStay) {
    this.maxStay = maxStay;
    return this;
  }

  public void unsetMaxStay() {
    this.maxStay = null;
  }

  /** Returns true if field maxStay is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxStay() {
    return this.maxStay != null;
  }

  public void setMaxStayIsSet(boolean value) {
    if (!value) {
      this.maxStay = null;
    }
  }

  public String getStopovers() {
    return this.stopovers;
  }

  public DisplayRule setStopovers(String stopovers) {
    this.stopovers = stopovers;
    return this;
  }

  public void unsetStopovers() {
    this.stopovers = null;
  }

  /** Returns true if field stopovers is set (has been assigned a value) and false otherwise */
  public boolean isSetStopovers() {
    return this.stopovers != null;
  }

  public void setStopoversIsSet(boolean value) {
    if (!value) {
      this.stopovers = null;
    }
  }

  public String getTravelDate() {
    return this.travelDate;
  }

  public DisplayRule setTravelDate(String travelDate) {
    this.travelDate = travelDate;
    return this;
  }

  public void unsetTravelDate() {
    this.travelDate = null;
  }

  /** Returns true if field travelDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTravelDate() {
    return this.travelDate != null;
  }

  public void setTravelDateIsSet(boolean value) {
    if (!value) {
      this.travelDate = null;
    }
  }

  public String getPenalties() {
    return this.penalties;
  }

  public DisplayRule setPenalties(String penalties) {
    this.penalties = penalties;
    return this;
  }

  public void unsetPenalties() {
    this.penalties = null;
  }

  /** Returns true if field penalties is set (has been assigned a value) and false otherwise */
  public boolean isSetPenalties() {
    return this.penalties != null;
  }

  public void setPenaltiesIsSet(boolean value) {
    if (!value) {
      this.penalties = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public DisplayRule setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MIN_STAY:
      if (value == null) {
        unsetMinStay();
      } else {
        setMinStay((String)value);
      }
      break;

    case MAX_STAY:
      if (value == null) {
        unsetMaxStay();
      } else {
        setMaxStay((String)value);
      }
      break;

    case STOPOVERS:
      if (value == null) {
        unsetStopovers();
      } else {
        setStopovers((String)value);
      }
      break;

    case TRAVEL_DATE:
      if (value == null) {
        unsetTravelDate();
      } else {
        setTravelDate((String)value);
      }
      break;

    case PENALTIES:
      if (value == null) {
        unsetPenalties();
      } else {
        setPenalties((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MIN_STAY:
      return getMinStay();

    case MAX_STAY:
      return getMaxStay();

    case STOPOVERS:
      return getStopovers();

    case TRAVEL_DATE:
      return getTravelDate();

    case PENALTIES:
      return getPenalties();

    case ID:
      return getId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MIN_STAY:
      return isSetMinStay();
    case MAX_STAY:
      return isSetMaxStay();
    case STOPOVERS:
      return isSetStopovers();
    case TRAVEL_DATE:
      return isSetTravelDate();
    case PENALTIES:
      return isSetPenalties();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DisplayRule)
      return this.equals((DisplayRule)that);
    return false;
  }

  public boolean equals(DisplayRule that) {
    if (that == null)
      return false;

    boolean this_present_minStay = true && this.isSetMinStay();
    boolean that_present_minStay = true && that.isSetMinStay();
    if (this_present_minStay || that_present_minStay) {
      if (!(this_present_minStay && that_present_minStay))
        return false;
      if (!this.minStay.equals(that.minStay))
        return false;
    }

    boolean this_present_maxStay = true && this.isSetMaxStay();
    boolean that_present_maxStay = true && that.isSetMaxStay();
    if (this_present_maxStay || that_present_maxStay) {
      if (!(this_present_maxStay && that_present_maxStay))
        return false;
      if (!this.maxStay.equals(that.maxStay))
        return false;
    }

    boolean this_present_stopovers = true && this.isSetStopovers();
    boolean that_present_stopovers = true && that.isSetStopovers();
    if (this_present_stopovers || that_present_stopovers) {
      if (!(this_present_stopovers && that_present_stopovers))
        return false;
      if (!this.stopovers.equals(that.stopovers))
        return false;
    }

    boolean this_present_travelDate = true && this.isSetTravelDate();
    boolean that_present_travelDate = true && that.isSetTravelDate();
    if (this_present_travelDate || that_present_travelDate) {
      if (!(this_present_travelDate && that_present_travelDate))
        return false;
      if (!this.travelDate.equals(that.travelDate))
        return false;
    }

    boolean this_present_penalties = true && this.isSetPenalties();
    boolean that_present_penalties = true && that.isSetPenalties();
    if (this_present_penalties || that_present_penalties) {
      if (!(this_present_penalties && that_present_penalties))
        return false;
      if (!this.penalties.equals(that.penalties))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DisplayRule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DisplayRule typedOther = (DisplayRule)other;

    lastComparison = Boolean.valueOf(isSetMinStay()).compareTo(typedOther.isSetMinStay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinStay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minStay, typedOther.minStay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxStay()).compareTo(typedOther.isSetMaxStay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxStay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxStay, typedOther.maxStay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopovers()).compareTo(typedOther.isSetStopovers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopovers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopovers, typedOther.stopovers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTravelDate()).compareTo(typedOther.isSetTravelDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTravelDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.travelDate, typedOther.travelDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPenalties()).compareTo(typedOther.isSetPenalties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenalties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penalties, typedOther.penalties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DisplayRule(");
    boolean first = true;

    if (isSetMinStay()) {
      sb.append("minStay:");
      if (this.minStay == null) {
        sb.append("null");
      } else {
        sb.append(this.minStay);
      }
      first = false;
    }
    if (isSetMaxStay()) {
      if (!first) sb.append(", ");
      sb.append("maxStay:");
      if (this.maxStay == null) {
        sb.append("null");
      } else {
        sb.append(this.maxStay);
      }
      first = false;
    }
    if (isSetStopovers()) {
      if (!first) sb.append(", ");
      sb.append("stopovers:");
      if (this.stopovers == null) {
        sb.append("null");
      } else {
        sb.append(this.stopovers);
      }
      first = false;
    }
    if (isSetTravelDate()) {
      if (!first) sb.append(", ");
      sb.append("travelDate:");
      if (this.travelDate == null) {
        sb.append("null");
      } else {
        sb.append(this.travelDate);
      }
      first = false;
    }
    if (isSetPenalties()) {
      if (!first) sb.append(", ");
      sb.append("penalties:");
      if (this.penalties == null) {
        sb.append("null");
      } else {
        sb.append(this.penalties);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DisplayRuleStandardSchemeFactory implements SchemeFactory {
    public DisplayRuleStandardScheme getScheme() {
      return new DisplayRuleStandardScheme();
    }
  }

  private static class DisplayRuleStandardScheme extends StandardScheme<DisplayRule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DisplayRule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 6: // MIN_STAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.minStay = iprot.readString();
              struct.setMinStayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAX_STAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxStay = iprot.readString();
              struct.setMaxStayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STOPOVERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stopovers = iprot.readString();
              struct.setStopoversIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TRAVEL_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.travelDate = iprot.readString();
              struct.setTravelDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PENALTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.penalties = iprot.readString();
              struct.setPenaltiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DisplayRule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.minStay != null) {
        if (struct.isSetMinStay()) {
          oprot.writeFieldBegin(MIN_STAY_FIELD_DESC);
          oprot.writeString(struct.minStay);
          oprot.writeFieldEnd();
        }
      }
      if (struct.maxStay != null) {
        if (struct.isSetMaxStay()) {
          oprot.writeFieldBegin(MAX_STAY_FIELD_DESC);
          oprot.writeString(struct.maxStay);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stopovers != null) {
        if (struct.isSetStopovers()) {
          oprot.writeFieldBegin(STOPOVERS_FIELD_DESC);
          oprot.writeString(struct.stopovers);
          oprot.writeFieldEnd();
        }
      }
      if (struct.travelDate != null) {
        if (struct.isSetTravelDate()) {
          oprot.writeFieldBegin(TRAVEL_DATE_FIELD_DESC);
          oprot.writeString(struct.travelDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.penalties != null) {
        if (struct.isSetPenalties()) {
          oprot.writeFieldBegin(PENALTIES_FIELD_DESC);
          oprot.writeString(struct.penalties);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DisplayRuleTupleSchemeFactory implements SchemeFactory {
    public DisplayRuleTupleScheme getScheme() {
      return new DisplayRuleTupleScheme();
    }
  }

  private static class DisplayRuleTupleScheme extends TupleScheme<DisplayRule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DisplayRule struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMinStay()) {
        optionals.set(0);
      }
      if (struct.isSetMaxStay()) {
        optionals.set(1);
      }
      if (struct.isSetStopovers()) {
        optionals.set(2);
      }
      if (struct.isSetTravelDate()) {
        optionals.set(3);
      }
      if (struct.isSetPenalties()) {
        optionals.set(4);
      }
      if (struct.isSetId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMinStay()) {
        oprot.writeString(struct.minStay);
      }
      if (struct.isSetMaxStay()) {
        oprot.writeString(struct.maxStay);
      }
      if (struct.isSetStopovers()) {
        oprot.writeString(struct.stopovers);
      }
      if (struct.isSetTravelDate()) {
        oprot.writeString(struct.travelDate);
      }
      if (struct.isSetPenalties()) {
        oprot.writeString(struct.penalties);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DisplayRule struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.minStay = iprot.readString();
        struct.setMinStayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxStay = iprot.readString();
        struct.setMaxStayIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stopovers = iprot.readString();
        struct.setStopoversIsSet(true);
      }
      if (incoming.get(3)) {
        struct.travelDate = iprot.readString();
        struct.setTravelDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.penalties = iprot.readString();
        struct.setPenaltiesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
    }
  }

}

