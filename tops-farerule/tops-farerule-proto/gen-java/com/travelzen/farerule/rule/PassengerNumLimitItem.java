/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule.rule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PassengerNumLimitItem implements org.apache.thrift.TBase<PassengerNumLimitItem, PassengerNumLimitItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PassengerNumLimitItem");

  private static final org.apache.thrift.protocol.TField JUDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("judge", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MIN_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("minNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_ADULT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("minAdultNum", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PassengerNumLimitItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PassengerNumLimitItemTupleSchemeFactory());
  }

  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public com.travelzen.farerule.rule.Judge judge; // optional
  public int minNum; // optional
  public int maxNum; // optional
  public int minAdultNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.travelzen.farerule.rule.Judge
     */
    JUDGE((short)1, "judge"),
    MIN_NUM((short)2, "minNum"),
    MAX_NUM((short)3, "maxNum"),
    MIN_ADULT_NUM((short)4, "minAdultNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JUDGE
          return JUDGE;
        case 2: // MIN_NUM
          return MIN_NUM;
        case 3: // MAX_NUM
          return MAX_NUM;
        case 4: // MIN_ADULT_NUM
          return MIN_ADULT_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINNUM_ISSET_ID = 0;
  private static final int __MAXNUM_ISSET_ID = 1;
  private static final int __MINADULTNUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.JUDGE,_Fields.MIN_NUM,_Fields.MAX_NUM,_Fields.MIN_ADULT_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JUDGE, new org.apache.thrift.meta_data.FieldMetaData("judge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.travelzen.farerule.rule.Judge.class)));
    tmpMap.put(_Fields.MIN_NUM, new org.apache.thrift.meta_data.FieldMetaData("minNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_NUM, new org.apache.thrift.meta_data.FieldMetaData("maxNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_ADULT_NUM, new org.apache.thrift.meta_data.FieldMetaData("minAdultNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PassengerNumLimitItem.class, metaDataMap);
  }

  public PassengerNumLimitItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PassengerNumLimitItem(PassengerNumLimitItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJudge()) {
      this.judge = other.judge;
    }
    this.minNum = other.minNum;
    this.maxNum = other.maxNum;
    this.minAdultNum = other.minAdultNum;
  }

  public PassengerNumLimitItem deepCopy() {
    return new PassengerNumLimitItem(this);
  }

  @Override
  public void clear() {
    this.judge = null;
    setMinNumIsSet(false);
    this.minNum = 0;
    setMaxNumIsSet(false);
    this.maxNum = 0;
    setMinAdultNumIsSet(false);
    this.minAdultNum = 0;
  }

  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public com.travelzen.farerule.rule.Judge getJudge() {
    return this.judge;
  }

  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public PassengerNumLimitItem setJudge(com.travelzen.farerule.rule.Judge judge) {
    this.judge = judge;
    return this;
  }

  public void unsetJudge() {
    this.judge = null;
  }

  /** Returns true if field judge is set (has been assigned a value) and false otherwise */
  public boolean isSetJudge() {
    return this.judge != null;
  }

  public void setJudgeIsSet(boolean value) {
    if (!value) {
      this.judge = null;
    }
  }

  public int getMinNum() {
    return this.minNum;
  }

  public PassengerNumLimitItem setMinNum(int minNum) {
    this.minNum = minNum;
    setMinNumIsSet(true);
    return this;
  }

  public void unsetMinNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINNUM_ISSET_ID);
  }

  /** Returns true if field minNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMinNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MINNUM_ISSET_ID);
  }

  public void setMinNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINNUM_ISSET_ID, value);
  }

  public int getMaxNum() {
    return this.maxNum;
  }

  public PassengerNumLimitItem setMaxNum(int maxNum) {
    this.maxNum = maxNum;
    setMaxNumIsSet(true);
    return this;
  }

  public void unsetMaxNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXNUM_ISSET_ID);
  }

  /** Returns true if field maxNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXNUM_ISSET_ID);
  }

  public void setMaxNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXNUM_ISSET_ID, value);
  }

  public int getMinAdultNum() {
    return this.minAdultNum;
  }

  public PassengerNumLimitItem setMinAdultNum(int minAdultNum) {
    this.minAdultNum = minAdultNum;
    setMinAdultNumIsSet(true);
    return this;
  }

  public void unsetMinAdultNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINADULTNUM_ISSET_ID);
  }

  /** Returns true if field minAdultNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMinAdultNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MINADULTNUM_ISSET_ID);
  }

  public void setMinAdultNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINADULTNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JUDGE:
      if (value == null) {
        unsetJudge();
      } else {
        setJudge((com.travelzen.farerule.rule.Judge)value);
      }
      break;

    case MIN_NUM:
      if (value == null) {
        unsetMinNum();
      } else {
        setMinNum((Integer)value);
      }
      break;

    case MAX_NUM:
      if (value == null) {
        unsetMaxNum();
      } else {
        setMaxNum((Integer)value);
      }
      break;

    case MIN_ADULT_NUM:
      if (value == null) {
        unsetMinAdultNum();
      } else {
        setMinAdultNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JUDGE:
      return getJudge();

    case MIN_NUM:
      return Integer.valueOf(getMinNum());

    case MAX_NUM:
      return Integer.valueOf(getMaxNum());

    case MIN_ADULT_NUM:
      return Integer.valueOf(getMinAdultNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JUDGE:
      return isSetJudge();
    case MIN_NUM:
      return isSetMinNum();
    case MAX_NUM:
      return isSetMaxNum();
    case MIN_ADULT_NUM:
      return isSetMinAdultNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PassengerNumLimitItem)
      return this.equals((PassengerNumLimitItem)that);
    return false;
  }

  public boolean equals(PassengerNumLimitItem that) {
    if (that == null)
      return false;

    boolean this_present_judge = true && this.isSetJudge();
    boolean that_present_judge = true && that.isSetJudge();
    if (this_present_judge || that_present_judge) {
      if (!(this_present_judge && that_present_judge))
        return false;
      if (!this.judge.equals(that.judge))
        return false;
    }

    boolean this_present_minNum = true && this.isSetMinNum();
    boolean that_present_minNum = true && that.isSetMinNum();
    if (this_present_minNum || that_present_minNum) {
      if (!(this_present_minNum && that_present_minNum))
        return false;
      if (this.minNum != that.minNum)
        return false;
    }

    boolean this_present_maxNum = true && this.isSetMaxNum();
    boolean that_present_maxNum = true && that.isSetMaxNum();
    if (this_present_maxNum || that_present_maxNum) {
      if (!(this_present_maxNum && that_present_maxNum))
        return false;
      if (this.maxNum != that.maxNum)
        return false;
    }

    boolean this_present_minAdultNum = true && this.isSetMinAdultNum();
    boolean that_present_minAdultNum = true && that.isSetMinAdultNum();
    if (this_present_minAdultNum || that_present_minAdultNum) {
      if (!(this_present_minAdultNum && that_present_minAdultNum))
        return false;
      if (this.minAdultNum != that.minAdultNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PassengerNumLimitItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PassengerNumLimitItem typedOther = (PassengerNumLimitItem)other;

    lastComparison = Boolean.valueOf(isSetJudge()).compareTo(typedOther.isSetJudge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJudge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.judge, typedOther.judge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinNum()).compareTo(typedOther.isSetMinNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minNum, typedOther.minNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxNum()).compareTo(typedOther.isSetMaxNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxNum, typedOther.maxNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinAdultNum()).compareTo(typedOther.isSetMinAdultNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinAdultNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minAdultNum, typedOther.minAdultNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PassengerNumLimitItem(");
    boolean first = true;

    if (isSetJudge()) {
      sb.append("judge:");
      if (this.judge == null) {
        sb.append("null");
      } else {
        sb.append(this.judge);
      }
      first = false;
    }
    if (isSetMinNum()) {
      if (!first) sb.append(", ");
      sb.append("minNum:");
      sb.append(this.minNum);
      first = false;
    }
    if (isSetMaxNum()) {
      if (!first) sb.append(", ");
      sb.append("maxNum:");
      sb.append(this.maxNum);
      first = false;
    }
    if (isSetMinAdultNum()) {
      if (!first) sb.append(", ");
      sb.append("minAdultNum:");
      sb.append(this.minAdultNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PassengerNumLimitItemStandardSchemeFactory implements SchemeFactory {
    public PassengerNumLimitItemStandardScheme getScheme() {
      return new PassengerNumLimitItemStandardScheme();
    }
  }

  private static class PassengerNumLimitItemStandardScheme extends StandardScheme<PassengerNumLimitItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PassengerNumLimitItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JUDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.judge = com.travelzen.farerule.rule.Judge.findByValue(iprot.readI32());
              struct.setJudgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIN_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minNum = iprot.readI32();
              struct.setMinNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxNum = iprot.readI32();
              struct.setMaxNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_ADULT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minAdultNum = iprot.readI32();
              struct.setMinAdultNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PassengerNumLimitItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.judge != null) {
        if (struct.isSetJudge()) {
          oprot.writeFieldBegin(JUDGE_FIELD_DESC);
          oprot.writeI32(struct.judge.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMinNum()) {
        oprot.writeFieldBegin(MIN_NUM_FIELD_DESC);
        oprot.writeI32(struct.minNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxNum()) {
        oprot.writeFieldBegin(MAX_NUM_FIELD_DESC);
        oprot.writeI32(struct.maxNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinAdultNum()) {
        oprot.writeFieldBegin(MIN_ADULT_NUM_FIELD_DESC);
        oprot.writeI32(struct.minAdultNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PassengerNumLimitItemTupleSchemeFactory implements SchemeFactory {
    public PassengerNumLimitItemTupleScheme getScheme() {
      return new PassengerNumLimitItemTupleScheme();
    }
  }

  private static class PassengerNumLimitItemTupleScheme extends TupleScheme<PassengerNumLimitItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PassengerNumLimitItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetJudge()) {
        optionals.set(0);
      }
      if (struct.isSetMinNum()) {
        optionals.set(1);
      }
      if (struct.isSetMaxNum()) {
        optionals.set(2);
      }
      if (struct.isSetMinAdultNum()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetJudge()) {
        oprot.writeI32(struct.judge.getValue());
      }
      if (struct.isSetMinNum()) {
        oprot.writeI32(struct.minNum);
      }
      if (struct.isSetMaxNum()) {
        oprot.writeI32(struct.maxNum);
      }
      if (struct.isSetMinAdultNum()) {
        oprot.writeI32(struct.minAdultNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PassengerNumLimitItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.judge = com.travelzen.farerule.rule.Judge.findByValue(iprot.readI32());
        struct.setJudgeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.minNum = iprot.readI32();
        struct.setMinNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxNum = iprot.readI32();
        struct.setMaxNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minAdultNum = iprot.readI32();
        struct.setMinAdultNumIsSet(true);
      }
    }
  }

}

