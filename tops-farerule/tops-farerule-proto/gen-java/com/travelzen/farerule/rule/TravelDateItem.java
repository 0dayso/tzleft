/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule.rule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TravelDateItem implements org.apache.thrift.TBase<TravelDateItem, TravelDateItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TravelDateItem");

  private static final org.apache.thrift.protocol.TField ORIGIN_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("originCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TRAVEL_DATE_SUB_ITEM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("travelDateSubItemList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COMPLETE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDate", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SEGMENT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentNum", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TravelDateItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TravelDateItemTupleSchemeFactory());
  }

  public com.travelzen.farerule.condition.OriginCondition originCondition; // optional
  public List<com.travelzen.farerule.condition.TravelDateSubItem> travelDateSubItemList; // optional
  public long completeDate; // optional
  public int segmentNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORIGIN_CONDITION((short)1, "originCondition"),
    TRAVEL_DATE_SUB_ITEM_LIST((short)2, "travelDateSubItemList"),
    COMPLETE_DATE((short)3, "completeDate"),
    SEGMENT_NUM((short)4, "segmentNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORIGIN_CONDITION
          return ORIGIN_CONDITION;
        case 2: // TRAVEL_DATE_SUB_ITEM_LIST
          return TRAVEL_DATE_SUB_ITEM_LIST;
        case 3: // COMPLETE_DATE
          return COMPLETE_DATE;
        case 4: // SEGMENT_NUM
          return SEGMENT_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPLETEDATE_ISSET_ID = 0;
  private static final int __SEGMENTNUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORIGIN_CONDITION,_Fields.TRAVEL_DATE_SUB_ITEM_LIST,_Fields.COMPLETE_DATE,_Fields.SEGMENT_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORIGIN_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("originCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.farerule.condition.OriginCondition.class)));
    tmpMap.put(_Fields.TRAVEL_DATE_SUB_ITEM_LIST, new org.apache.thrift.meta_data.FieldMetaData("travelDateSubItemList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.farerule.condition.TravelDateSubItem.class))));
    tmpMap.put(_Fields.COMPLETE_DATE, new org.apache.thrift.meta_data.FieldMetaData("completeDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEGMENT_NUM, new org.apache.thrift.meta_data.FieldMetaData("segmentNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TravelDateItem.class, metaDataMap);
  }

  public TravelDateItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TravelDateItem(TravelDateItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOriginCondition()) {
      this.originCondition = new com.travelzen.farerule.condition.OriginCondition(other.originCondition);
    }
    if (other.isSetTravelDateSubItemList()) {
      List<com.travelzen.farerule.condition.TravelDateSubItem> __this__travelDateSubItemList = new ArrayList<com.travelzen.farerule.condition.TravelDateSubItem>();
      for (com.travelzen.farerule.condition.TravelDateSubItem other_element : other.travelDateSubItemList) {
        __this__travelDateSubItemList.add(new com.travelzen.farerule.condition.TravelDateSubItem(other_element));
      }
      this.travelDateSubItemList = __this__travelDateSubItemList;
    }
    this.completeDate = other.completeDate;
    this.segmentNum = other.segmentNum;
  }

  public TravelDateItem deepCopy() {
    return new TravelDateItem(this);
  }

  @Override
  public void clear() {
    this.originCondition = null;
    this.travelDateSubItemList = null;
    setCompleteDateIsSet(false);
    this.completeDate = 0;
    setSegmentNumIsSet(false);
    this.segmentNum = 0;
  }

  public com.travelzen.farerule.condition.OriginCondition getOriginCondition() {
    return this.originCondition;
  }

  public TravelDateItem setOriginCondition(com.travelzen.farerule.condition.OriginCondition originCondition) {
    this.originCondition = originCondition;
    return this;
  }

  public void unsetOriginCondition() {
    this.originCondition = null;
  }

  /** Returns true if field originCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginCondition() {
    return this.originCondition != null;
  }

  public void setOriginConditionIsSet(boolean value) {
    if (!value) {
      this.originCondition = null;
    }
  }

  public int getTravelDateSubItemListSize() {
    return (this.travelDateSubItemList == null) ? 0 : this.travelDateSubItemList.size();
  }

  public java.util.Iterator<com.travelzen.farerule.condition.TravelDateSubItem> getTravelDateSubItemListIterator() {
    return (this.travelDateSubItemList == null) ? null : this.travelDateSubItemList.iterator();
  }

  public void addToTravelDateSubItemList(com.travelzen.farerule.condition.TravelDateSubItem elem) {
    if (this.travelDateSubItemList == null) {
      this.travelDateSubItemList = new ArrayList<com.travelzen.farerule.condition.TravelDateSubItem>();
    }
    this.travelDateSubItemList.add(elem);
  }

  public List<com.travelzen.farerule.condition.TravelDateSubItem> getTravelDateSubItemList() {
    return this.travelDateSubItemList;
  }

  public TravelDateItem setTravelDateSubItemList(List<com.travelzen.farerule.condition.TravelDateSubItem> travelDateSubItemList) {
    this.travelDateSubItemList = travelDateSubItemList;
    return this;
  }

  public void unsetTravelDateSubItemList() {
    this.travelDateSubItemList = null;
  }

  /** Returns true if field travelDateSubItemList is set (has been assigned a value) and false otherwise */
  public boolean isSetTravelDateSubItemList() {
    return this.travelDateSubItemList != null;
  }

  public void setTravelDateSubItemListIsSet(boolean value) {
    if (!value) {
      this.travelDateSubItemList = null;
    }
  }

  public long getCompleteDate() {
    return this.completeDate;
  }

  public TravelDateItem setCompleteDate(long completeDate) {
    this.completeDate = completeDate;
    setCompleteDateIsSet(true);
    return this;
  }

  public void unsetCompleteDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETEDATE_ISSET_ID);
  }

  /** Returns true if field completeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDate() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETEDATE_ISSET_ID);
  }

  public void setCompleteDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETEDATE_ISSET_ID, value);
  }

  public int getSegmentNum() {
    return this.segmentNum;
  }

  public TravelDateItem setSegmentNum(int segmentNum) {
    this.segmentNum = segmentNum;
    setSegmentNumIsSet(true);
    return this;
  }

  public void unsetSegmentNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEGMENTNUM_ISSET_ID);
  }

  /** Returns true if field segmentNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSegmentNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SEGMENTNUM_ISSET_ID);
  }

  public void setSegmentNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEGMENTNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORIGIN_CONDITION:
      if (value == null) {
        unsetOriginCondition();
      } else {
        setOriginCondition((com.travelzen.farerule.condition.OriginCondition)value);
      }
      break;

    case TRAVEL_DATE_SUB_ITEM_LIST:
      if (value == null) {
        unsetTravelDateSubItemList();
      } else {
        setTravelDateSubItemList((List<com.travelzen.farerule.condition.TravelDateSubItem>)value);
      }
      break;

    case COMPLETE_DATE:
      if (value == null) {
        unsetCompleteDate();
      } else {
        setCompleteDate((Long)value);
      }
      break;

    case SEGMENT_NUM:
      if (value == null) {
        unsetSegmentNum();
      } else {
        setSegmentNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORIGIN_CONDITION:
      return getOriginCondition();

    case TRAVEL_DATE_SUB_ITEM_LIST:
      return getTravelDateSubItemList();

    case COMPLETE_DATE:
      return Long.valueOf(getCompleteDate());

    case SEGMENT_NUM:
      return Integer.valueOf(getSegmentNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORIGIN_CONDITION:
      return isSetOriginCondition();
    case TRAVEL_DATE_SUB_ITEM_LIST:
      return isSetTravelDateSubItemList();
    case COMPLETE_DATE:
      return isSetCompleteDate();
    case SEGMENT_NUM:
      return isSetSegmentNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TravelDateItem)
      return this.equals((TravelDateItem)that);
    return false;
  }

  public boolean equals(TravelDateItem that) {
    if (that == null)
      return false;

    boolean this_present_originCondition = true && this.isSetOriginCondition();
    boolean that_present_originCondition = true && that.isSetOriginCondition();
    if (this_present_originCondition || that_present_originCondition) {
      if (!(this_present_originCondition && that_present_originCondition))
        return false;
      if (!this.originCondition.equals(that.originCondition))
        return false;
    }

    boolean this_present_travelDateSubItemList = true && this.isSetTravelDateSubItemList();
    boolean that_present_travelDateSubItemList = true && that.isSetTravelDateSubItemList();
    if (this_present_travelDateSubItemList || that_present_travelDateSubItemList) {
      if (!(this_present_travelDateSubItemList && that_present_travelDateSubItemList))
        return false;
      if (!this.travelDateSubItemList.equals(that.travelDateSubItemList))
        return false;
    }

    boolean this_present_completeDate = true && this.isSetCompleteDate();
    boolean that_present_completeDate = true && that.isSetCompleteDate();
    if (this_present_completeDate || that_present_completeDate) {
      if (!(this_present_completeDate && that_present_completeDate))
        return false;
      if (this.completeDate != that.completeDate)
        return false;
    }

    boolean this_present_segmentNum = true && this.isSetSegmentNum();
    boolean that_present_segmentNum = true && that.isSetSegmentNum();
    if (this_present_segmentNum || that_present_segmentNum) {
      if (!(this_present_segmentNum && that_present_segmentNum))
        return false;
      if (this.segmentNum != that.segmentNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TravelDateItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TravelDateItem typedOther = (TravelDateItem)other;

    lastComparison = Boolean.valueOf(isSetOriginCondition()).compareTo(typedOther.isSetOriginCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originCondition, typedOther.originCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTravelDateSubItemList()).compareTo(typedOther.isSetTravelDateSubItemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTravelDateSubItemList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.travelDateSubItemList, typedOther.travelDateSubItemList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDate()).compareTo(typedOther.isSetCompleteDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDate, typedOther.completeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSegmentNum()).compareTo(typedOther.isSetSegmentNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSegmentNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentNum, typedOther.segmentNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TravelDateItem(");
    boolean first = true;

    if (isSetOriginCondition()) {
      sb.append("originCondition:");
      if (this.originCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.originCondition);
      }
      first = false;
    }
    if (isSetTravelDateSubItemList()) {
      if (!first) sb.append(", ");
      sb.append("travelDateSubItemList:");
      if (this.travelDateSubItemList == null) {
        sb.append("null");
      } else {
        sb.append(this.travelDateSubItemList);
      }
      first = false;
    }
    if (isSetCompleteDate()) {
      if (!first) sb.append(", ");
      sb.append("completeDate:");
      sb.append(this.completeDate);
      first = false;
    }
    if (isSetSegmentNum()) {
      if (!first) sb.append(", ");
      sb.append("segmentNum:");
      sb.append(this.segmentNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (originCondition != null) {
      originCondition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TravelDateItemStandardSchemeFactory implements SchemeFactory {
    public TravelDateItemStandardScheme getScheme() {
      return new TravelDateItemStandardScheme();
    }
  }

  private static class TravelDateItemStandardScheme extends StandardScheme<TravelDateItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TravelDateItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORIGIN_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.originCondition = new com.travelzen.farerule.condition.OriginCondition();
              struct.originCondition.read(iprot);
              struct.setOriginConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRAVEL_DATE_SUB_ITEM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.travelDateSubItemList = new ArrayList<com.travelzen.farerule.condition.TravelDateSubItem>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  com.travelzen.farerule.condition.TravelDateSubItem _elem34; // required
                  _elem34 = new com.travelzen.farerule.condition.TravelDateSubItem();
                  _elem34.read(iprot);
                  struct.travelDateSubItemList.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setTravelDateSubItemListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPLETE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.completeDate = iprot.readI64();
              struct.setCompleteDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEGMENT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.segmentNum = iprot.readI32();
              struct.setSegmentNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TravelDateItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.originCondition != null) {
        if (struct.isSetOriginCondition()) {
          oprot.writeFieldBegin(ORIGIN_CONDITION_FIELD_DESC);
          struct.originCondition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.travelDateSubItemList != null) {
        if (struct.isSetTravelDateSubItemList()) {
          oprot.writeFieldBegin(TRAVEL_DATE_SUB_ITEM_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.travelDateSubItemList.size()));
            for (com.travelzen.farerule.condition.TravelDateSubItem _iter35 : struct.travelDateSubItemList)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompleteDate()) {
        oprot.writeFieldBegin(COMPLETE_DATE_FIELD_DESC);
        oprot.writeI64(struct.completeDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSegmentNum()) {
        oprot.writeFieldBegin(SEGMENT_NUM_FIELD_DESC);
        oprot.writeI32(struct.segmentNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TravelDateItemTupleSchemeFactory implements SchemeFactory {
    public TravelDateItemTupleScheme getScheme() {
      return new TravelDateItemTupleScheme();
    }
  }

  private static class TravelDateItemTupleScheme extends TupleScheme<TravelDateItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TravelDateItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOriginCondition()) {
        optionals.set(0);
      }
      if (struct.isSetTravelDateSubItemList()) {
        optionals.set(1);
      }
      if (struct.isSetCompleteDate()) {
        optionals.set(2);
      }
      if (struct.isSetSegmentNum()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOriginCondition()) {
        struct.originCondition.write(oprot);
      }
      if (struct.isSetTravelDateSubItemList()) {
        {
          oprot.writeI32(struct.travelDateSubItemList.size());
          for (com.travelzen.farerule.condition.TravelDateSubItem _iter36 : struct.travelDateSubItemList)
          {
            _iter36.write(oprot);
          }
        }
      }
      if (struct.isSetCompleteDate()) {
        oprot.writeI64(struct.completeDate);
      }
      if (struct.isSetSegmentNum()) {
        oprot.writeI32(struct.segmentNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TravelDateItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.originCondition = new com.travelzen.farerule.condition.OriginCondition();
        struct.originCondition.read(iprot);
        struct.setOriginConditionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.travelDateSubItemList = new ArrayList<com.travelzen.farerule.condition.TravelDateSubItem>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            com.travelzen.farerule.condition.TravelDateSubItem _elem39; // required
            _elem39 = new com.travelzen.farerule.condition.TravelDateSubItem();
            _elem39.read(iprot);
            struct.travelDateSubItemList.add(_elem39);
          }
        }
        struct.setTravelDateSubItemListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.completeDate = iprot.readI64();
        struct.setCompleteDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.segmentNum = iprot.readI32();
        struct.setSegmentNumIsSet(true);
      }
    }
  }

}

