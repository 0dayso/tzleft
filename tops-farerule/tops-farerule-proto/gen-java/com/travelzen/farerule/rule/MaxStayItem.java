/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule.rule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MaxStayItem implements org.apache.thrift.TBase<MaxStayItem, MaxStayItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MaxStayItem");

  private static final org.apache.thrift.protocol.TField RULE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField STAY_TIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stayTimeType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STAY_TIME_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("stayTimeNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField STAY_SEGMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("staySegmentList", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MaxStayItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MaxStayItemTupleSchemeFactory());
  }

  public com.travelzen.farerule.condition.RuleCondition ruleCondition; // optional
  /**
   * 
   * @see TimeTypeEnum
   */
  public TimeTypeEnum stayTimeType; // optional
  public int stayTimeNum; // optional
  public long date; // optional
  public List<StaySegment> staySegmentList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RULE_CONDITION((short)1, "ruleCondition"),
    /**
     * 
     * @see TimeTypeEnum
     */
    STAY_TIME_TYPE((short)2, "stayTimeType"),
    STAY_TIME_NUM((short)3, "stayTimeNum"),
    DATE((short)4, "date"),
    STAY_SEGMENT_LIST((short)5, "staySegmentList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RULE_CONDITION
          return RULE_CONDITION;
        case 2: // STAY_TIME_TYPE
          return STAY_TIME_TYPE;
        case 3: // STAY_TIME_NUM
          return STAY_TIME_NUM;
        case 4: // DATE
          return DATE;
        case 5: // STAY_SEGMENT_LIST
          return STAY_SEGMENT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STAYTIMENUM_ISSET_ID = 0;
  private static final int __DATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RULE_CONDITION,_Fields.STAY_TIME_TYPE,_Fields.STAY_TIME_NUM,_Fields.DATE,_Fields.STAY_SEGMENT_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RULE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("ruleCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.travelzen.farerule.condition.RuleCondition.class)));
    tmpMap.put(_Fields.STAY_TIME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stayTimeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TimeTypeEnum.class)));
    tmpMap.put(_Fields.STAY_TIME_NUM, new org.apache.thrift.meta_data.FieldMetaData("stayTimeNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STAY_SEGMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("staySegmentList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StaySegment.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MaxStayItem.class, metaDataMap);
  }

  public MaxStayItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MaxStayItem(MaxStayItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRuleCondition()) {
      this.ruleCondition = new com.travelzen.farerule.condition.RuleCondition(other.ruleCondition);
    }
    if (other.isSetStayTimeType()) {
      this.stayTimeType = other.stayTimeType;
    }
    this.stayTimeNum = other.stayTimeNum;
    this.date = other.date;
    if (other.isSetStaySegmentList()) {
      List<StaySegment> __this__staySegmentList = new ArrayList<StaySegment>();
      for (StaySegment other_element : other.staySegmentList) {
        __this__staySegmentList.add(new StaySegment(other_element));
      }
      this.staySegmentList = __this__staySegmentList;
    }
  }

  public MaxStayItem deepCopy() {
    return new MaxStayItem(this);
  }

  @Override
  public void clear() {
    this.ruleCondition = null;
    this.stayTimeType = null;
    setStayTimeNumIsSet(false);
    this.stayTimeNum = 0;
    setDateIsSet(false);
    this.date = 0;
    this.staySegmentList = null;
  }

  public com.travelzen.farerule.condition.RuleCondition getRuleCondition() {
    return this.ruleCondition;
  }

  public MaxStayItem setRuleCondition(com.travelzen.farerule.condition.RuleCondition ruleCondition) {
    this.ruleCondition = ruleCondition;
    return this;
  }

  public void unsetRuleCondition() {
    this.ruleCondition = null;
  }

  /** Returns true if field ruleCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetRuleCondition() {
    return this.ruleCondition != null;
  }

  public void setRuleConditionIsSet(boolean value) {
    if (!value) {
      this.ruleCondition = null;
    }
  }

  /**
   * 
   * @see TimeTypeEnum
   */
  public TimeTypeEnum getStayTimeType() {
    return this.stayTimeType;
  }

  /**
   * 
   * @see TimeTypeEnum
   */
  public MaxStayItem setStayTimeType(TimeTypeEnum stayTimeType) {
    this.stayTimeType = stayTimeType;
    return this;
  }

  public void unsetStayTimeType() {
    this.stayTimeType = null;
  }

  /** Returns true if field stayTimeType is set (has been assigned a value) and false otherwise */
  public boolean isSetStayTimeType() {
    return this.stayTimeType != null;
  }

  public void setStayTimeTypeIsSet(boolean value) {
    if (!value) {
      this.stayTimeType = null;
    }
  }

  public int getStayTimeNum() {
    return this.stayTimeNum;
  }

  public MaxStayItem setStayTimeNum(int stayTimeNum) {
    this.stayTimeNum = stayTimeNum;
    setStayTimeNumIsSet(true);
    return this;
  }

  public void unsetStayTimeNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAYTIMENUM_ISSET_ID);
  }

  /** Returns true if field stayTimeNum is set (has been assigned a value) and false otherwise */
  public boolean isSetStayTimeNum() {
    return EncodingUtils.testBit(__isset_bitfield, __STAYTIMENUM_ISSET_ID);
  }

  public void setStayTimeNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAYTIMENUM_ISSET_ID, value);
  }

  public long getDate() {
    return this.date;
  }

  public MaxStayItem setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  public int getStaySegmentListSize() {
    return (this.staySegmentList == null) ? 0 : this.staySegmentList.size();
  }

  public java.util.Iterator<StaySegment> getStaySegmentListIterator() {
    return (this.staySegmentList == null) ? null : this.staySegmentList.iterator();
  }

  public void addToStaySegmentList(StaySegment elem) {
    if (this.staySegmentList == null) {
      this.staySegmentList = new ArrayList<StaySegment>();
    }
    this.staySegmentList.add(elem);
  }

  public List<StaySegment> getStaySegmentList() {
    return this.staySegmentList;
  }

  public MaxStayItem setStaySegmentList(List<StaySegment> staySegmentList) {
    this.staySegmentList = staySegmentList;
    return this;
  }

  public void unsetStaySegmentList() {
    this.staySegmentList = null;
  }

  /** Returns true if field staySegmentList is set (has been assigned a value) and false otherwise */
  public boolean isSetStaySegmentList() {
    return this.staySegmentList != null;
  }

  public void setStaySegmentListIsSet(boolean value) {
    if (!value) {
      this.staySegmentList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RULE_CONDITION:
      if (value == null) {
        unsetRuleCondition();
      } else {
        setRuleCondition((com.travelzen.farerule.condition.RuleCondition)value);
      }
      break;

    case STAY_TIME_TYPE:
      if (value == null) {
        unsetStayTimeType();
      } else {
        setStayTimeType((TimeTypeEnum)value);
      }
      break;

    case STAY_TIME_NUM:
      if (value == null) {
        unsetStayTimeNum();
      } else {
        setStayTimeNum((Integer)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case STAY_SEGMENT_LIST:
      if (value == null) {
        unsetStaySegmentList();
      } else {
        setStaySegmentList((List<StaySegment>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RULE_CONDITION:
      return getRuleCondition();

    case STAY_TIME_TYPE:
      return getStayTimeType();

    case STAY_TIME_NUM:
      return Integer.valueOf(getStayTimeNum());

    case DATE:
      return Long.valueOf(getDate());

    case STAY_SEGMENT_LIST:
      return getStaySegmentList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RULE_CONDITION:
      return isSetRuleCondition();
    case STAY_TIME_TYPE:
      return isSetStayTimeType();
    case STAY_TIME_NUM:
      return isSetStayTimeNum();
    case DATE:
      return isSetDate();
    case STAY_SEGMENT_LIST:
      return isSetStaySegmentList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MaxStayItem)
      return this.equals((MaxStayItem)that);
    return false;
  }

  public boolean equals(MaxStayItem that) {
    if (that == null)
      return false;

    boolean this_present_ruleCondition = true && this.isSetRuleCondition();
    boolean that_present_ruleCondition = true && that.isSetRuleCondition();
    if (this_present_ruleCondition || that_present_ruleCondition) {
      if (!(this_present_ruleCondition && that_present_ruleCondition))
        return false;
      if (!this.ruleCondition.equals(that.ruleCondition))
        return false;
    }

    boolean this_present_stayTimeType = true && this.isSetStayTimeType();
    boolean that_present_stayTimeType = true && that.isSetStayTimeType();
    if (this_present_stayTimeType || that_present_stayTimeType) {
      if (!(this_present_stayTimeType && that_present_stayTimeType))
        return false;
      if (!this.stayTimeType.equals(that.stayTimeType))
        return false;
    }

    boolean this_present_stayTimeNum = true && this.isSetStayTimeNum();
    boolean that_present_stayTimeNum = true && that.isSetStayTimeNum();
    if (this_present_stayTimeNum || that_present_stayTimeNum) {
      if (!(this_present_stayTimeNum && that_present_stayTimeNum))
        return false;
      if (this.stayTimeNum != that.stayTimeNum)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_staySegmentList = true && this.isSetStaySegmentList();
    boolean that_present_staySegmentList = true && that.isSetStaySegmentList();
    if (this_present_staySegmentList || that_present_staySegmentList) {
      if (!(this_present_staySegmentList && that_present_staySegmentList))
        return false;
      if (!this.staySegmentList.equals(that.staySegmentList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MaxStayItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MaxStayItem typedOther = (MaxStayItem)other;

    lastComparison = Boolean.valueOf(isSetRuleCondition()).compareTo(typedOther.isSetRuleCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuleCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleCondition, typedOther.ruleCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStayTimeType()).compareTo(typedOther.isSetStayTimeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStayTimeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stayTimeType, typedOther.stayTimeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStayTimeNum()).compareTo(typedOther.isSetStayTimeNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStayTimeNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stayTimeNum, typedOther.stayTimeNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStaySegmentList()).compareTo(typedOther.isSetStaySegmentList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaySegmentList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.staySegmentList, typedOther.staySegmentList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MaxStayItem(");
    boolean first = true;

    if (isSetRuleCondition()) {
      sb.append("ruleCondition:");
      if (this.ruleCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleCondition);
      }
      first = false;
    }
    if (isSetStayTimeType()) {
      if (!first) sb.append(", ");
      sb.append("stayTimeType:");
      if (this.stayTimeType == null) {
        sb.append("null");
      } else {
        sb.append(this.stayTimeType);
      }
      first = false;
    }
    if (isSetStayTimeNum()) {
      if (!first) sb.append(", ");
      sb.append("stayTimeNum:");
      sb.append(this.stayTimeNum);
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      sb.append(this.date);
      first = false;
    }
    if (isSetStaySegmentList()) {
      if (!first) sb.append(", ");
      sb.append("staySegmentList:");
      if (this.staySegmentList == null) {
        sb.append("null");
      } else {
        sb.append(this.staySegmentList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ruleCondition != null) {
      ruleCondition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MaxStayItemStandardSchemeFactory implements SchemeFactory {
    public MaxStayItemStandardScheme getScheme() {
      return new MaxStayItemStandardScheme();
    }
  }

  private static class MaxStayItemStandardScheme extends StandardScheme<MaxStayItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MaxStayItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RULE_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ruleCondition = new com.travelzen.farerule.condition.RuleCondition();
              struct.ruleCondition.read(iprot);
              struct.setRuleConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STAY_TIME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stayTimeType = TimeTypeEnum.findByValue(iprot.readI32());
              struct.setStayTimeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STAY_TIME_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stayTimeNum = iprot.readI32();
              struct.setStayTimeNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STAY_SEGMENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.staySegmentList = new ArrayList<StaySegment>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  StaySegment _elem26; // required
                  _elem26 = new StaySegment();
                  _elem26.read(iprot);
                  struct.staySegmentList.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setStaySegmentListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MaxStayItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ruleCondition != null) {
        if (struct.isSetRuleCondition()) {
          oprot.writeFieldBegin(RULE_CONDITION_FIELD_DESC);
          struct.ruleCondition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stayTimeType != null) {
        if (struct.isSetStayTimeType()) {
          oprot.writeFieldBegin(STAY_TIME_TYPE_FIELD_DESC);
          oprot.writeI32(struct.stayTimeType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStayTimeNum()) {
        oprot.writeFieldBegin(STAY_TIME_NUM_FIELD_DESC);
        oprot.writeI32(struct.stayTimeNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDate()) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI64(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.staySegmentList != null) {
        if (struct.isSetStaySegmentList()) {
          oprot.writeFieldBegin(STAY_SEGMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.staySegmentList.size()));
            for (StaySegment _iter27 : struct.staySegmentList)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MaxStayItemTupleSchemeFactory implements SchemeFactory {
    public MaxStayItemTupleScheme getScheme() {
      return new MaxStayItemTupleScheme();
    }
  }

  private static class MaxStayItemTupleScheme extends TupleScheme<MaxStayItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MaxStayItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRuleCondition()) {
        optionals.set(0);
      }
      if (struct.isSetStayTimeType()) {
        optionals.set(1);
      }
      if (struct.isSetStayTimeNum()) {
        optionals.set(2);
      }
      if (struct.isSetDate()) {
        optionals.set(3);
      }
      if (struct.isSetStaySegmentList()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRuleCondition()) {
        struct.ruleCondition.write(oprot);
      }
      if (struct.isSetStayTimeType()) {
        oprot.writeI32(struct.stayTimeType.getValue());
      }
      if (struct.isSetStayTimeNum()) {
        oprot.writeI32(struct.stayTimeNum);
      }
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
      if (struct.isSetStaySegmentList()) {
        {
          oprot.writeI32(struct.staySegmentList.size());
          for (StaySegment _iter28 : struct.staySegmentList)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MaxStayItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ruleCondition = new com.travelzen.farerule.condition.RuleCondition();
        struct.ruleCondition.read(iprot);
        struct.setRuleConditionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stayTimeType = TimeTypeEnum.findByValue(iprot.readI32());
        struct.setStayTimeTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stayTimeNum = iprot.readI32();
        struct.setStayTimeNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.staySegmentList = new ArrayList<StaySegment>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            StaySegment _elem31; // required
            _elem31 = new StaySegment();
            _elem31.read(iprot);
            struct.staySegmentList.add(_elem31);
          }
        }
        struct.setStaySegmentListIsSet(true);
      }
    }
  }

}

