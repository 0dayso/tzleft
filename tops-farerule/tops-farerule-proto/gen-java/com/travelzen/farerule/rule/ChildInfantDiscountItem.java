/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.travelzen.farerule.rule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChildInfantDiscountItem implements org.apache.thrift.TBase<ChildInfantDiscountItem, ChildInfantDiscountItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChildInfantDiscountItem");

  private static final org.apache.thrift.protocol.TField PASSENGER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("passengerType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MIN_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("minAge", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxAge", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOMPANIED_FIELD_DESC = new org.apache.thrift.protocol.TField("accompanied", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HAS_SEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasSeat", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discount", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChildInfantDiscountItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChildInfantDiscountItemTupleSchemeFactory());
  }

  /**
   * 
   * @see PassengerType
   */
  public PassengerType passengerType; // optional
  public int minAge; // optional
  public int maxAge; // optional
  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public com.travelzen.farerule.rule.Judge accompanied; // optional
  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public com.travelzen.farerule.rule.Judge hasSeat; // optional
  public int discount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PassengerType
     */
    PASSENGER_TYPE((short)1, "passengerType"),
    MIN_AGE((short)2, "minAge"),
    MAX_AGE((short)3, "maxAge"),
    /**
     * 
     * @see com.travelzen.farerule.rule.Judge
     */
    ACCOMPANIED((short)4, "accompanied"),
    /**
     * 
     * @see com.travelzen.farerule.rule.Judge
     */
    HAS_SEAT((short)5, "hasSeat"),
    DISCOUNT((short)6, "discount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PASSENGER_TYPE
          return PASSENGER_TYPE;
        case 2: // MIN_AGE
          return MIN_AGE;
        case 3: // MAX_AGE
          return MAX_AGE;
        case 4: // ACCOMPANIED
          return ACCOMPANIED;
        case 5: // HAS_SEAT
          return HAS_SEAT;
        case 6: // DISCOUNT
          return DISCOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINAGE_ISSET_ID = 0;
  private static final int __MAXAGE_ISSET_ID = 1;
  private static final int __DISCOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PASSENGER_TYPE,_Fields.MIN_AGE,_Fields.MAX_AGE,_Fields.ACCOMPANIED,_Fields.HAS_SEAT,_Fields.DISCOUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PASSENGER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("passengerType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PassengerType.class)));
    tmpMap.put(_Fields.MIN_AGE, new org.apache.thrift.meta_data.FieldMetaData("minAge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_AGE, new org.apache.thrift.meta_data.FieldMetaData("maxAge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOMPANIED, new org.apache.thrift.meta_data.FieldMetaData("accompanied", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.travelzen.farerule.rule.Judge.class)));
    tmpMap.put(_Fields.HAS_SEAT, new org.apache.thrift.meta_data.FieldMetaData("hasSeat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.travelzen.farerule.rule.Judge.class)));
    tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("discount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChildInfantDiscountItem.class, metaDataMap);
  }

  public ChildInfantDiscountItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChildInfantDiscountItem(ChildInfantDiscountItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPassengerType()) {
      this.passengerType = other.passengerType;
    }
    this.minAge = other.minAge;
    this.maxAge = other.maxAge;
    if (other.isSetAccompanied()) {
      this.accompanied = other.accompanied;
    }
    if (other.isSetHasSeat()) {
      this.hasSeat = other.hasSeat;
    }
    this.discount = other.discount;
  }

  public ChildInfantDiscountItem deepCopy() {
    return new ChildInfantDiscountItem(this);
  }

  @Override
  public void clear() {
    this.passengerType = null;
    setMinAgeIsSet(false);
    this.minAge = 0;
    setMaxAgeIsSet(false);
    this.maxAge = 0;
    this.accompanied = null;
    this.hasSeat = null;
    setDiscountIsSet(false);
    this.discount = 0;
  }

  /**
   * 
   * @see PassengerType
   */
  public PassengerType getPassengerType() {
    return this.passengerType;
  }

  /**
   * 
   * @see PassengerType
   */
  public ChildInfantDiscountItem setPassengerType(PassengerType passengerType) {
    this.passengerType = passengerType;
    return this;
  }

  public void unsetPassengerType() {
    this.passengerType = null;
  }

  /** Returns true if field passengerType is set (has been assigned a value) and false otherwise */
  public boolean isSetPassengerType() {
    return this.passengerType != null;
  }

  public void setPassengerTypeIsSet(boolean value) {
    if (!value) {
      this.passengerType = null;
    }
  }

  public int getMinAge() {
    return this.minAge;
  }

  public ChildInfantDiscountItem setMinAge(int minAge) {
    this.minAge = minAge;
    setMinAgeIsSet(true);
    return this;
  }

  public void unsetMinAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINAGE_ISSET_ID);
  }

  /** Returns true if field minAge is set (has been assigned a value) and false otherwise */
  public boolean isSetMinAge() {
    return EncodingUtils.testBit(__isset_bitfield, __MINAGE_ISSET_ID);
  }

  public void setMinAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINAGE_ISSET_ID, value);
  }

  public int getMaxAge() {
    return this.maxAge;
  }

  public ChildInfantDiscountItem setMaxAge(int maxAge) {
    this.maxAge = maxAge;
    setMaxAgeIsSet(true);
    return this;
  }

  public void unsetMaxAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXAGE_ISSET_ID);
  }

  /** Returns true if field maxAge is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxAge() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXAGE_ISSET_ID);
  }

  public void setMaxAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXAGE_ISSET_ID, value);
  }

  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public com.travelzen.farerule.rule.Judge getAccompanied() {
    return this.accompanied;
  }

  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public ChildInfantDiscountItem setAccompanied(com.travelzen.farerule.rule.Judge accompanied) {
    this.accompanied = accompanied;
    return this;
  }

  public void unsetAccompanied() {
    this.accompanied = null;
  }

  /** Returns true if field accompanied is set (has been assigned a value) and false otherwise */
  public boolean isSetAccompanied() {
    return this.accompanied != null;
  }

  public void setAccompaniedIsSet(boolean value) {
    if (!value) {
      this.accompanied = null;
    }
  }

  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public com.travelzen.farerule.rule.Judge getHasSeat() {
    return this.hasSeat;
  }

  /**
   * 
   * @see com.travelzen.farerule.rule.Judge
   */
  public ChildInfantDiscountItem setHasSeat(com.travelzen.farerule.rule.Judge hasSeat) {
    this.hasSeat = hasSeat;
    return this;
  }

  public void unsetHasSeat() {
    this.hasSeat = null;
  }

  /** Returns true if field hasSeat is set (has been assigned a value) and false otherwise */
  public boolean isSetHasSeat() {
    return this.hasSeat != null;
  }

  public void setHasSeatIsSet(boolean value) {
    if (!value) {
      this.hasSeat = null;
    }
  }

  public int getDiscount() {
    return this.discount;
  }

  public ChildInfantDiscountItem setDiscount(int discount) {
    this.discount = discount;
    setDiscountIsSet(true);
    return this;
  }

  public void unsetDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  /** Returns true if field discount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  public void setDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PASSENGER_TYPE:
      if (value == null) {
        unsetPassengerType();
      } else {
        setPassengerType((PassengerType)value);
      }
      break;

    case MIN_AGE:
      if (value == null) {
        unsetMinAge();
      } else {
        setMinAge((Integer)value);
      }
      break;

    case MAX_AGE:
      if (value == null) {
        unsetMaxAge();
      } else {
        setMaxAge((Integer)value);
      }
      break;

    case ACCOMPANIED:
      if (value == null) {
        unsetAccompanied();
      } else {
        setAccompanied((com.travelzen.farerule.rule.Judge)value);
      }
      break;

    case HAS_SEAT:
      if (value == null) {
        unsetHasSeat();
      } else {
        setHasSeat((com.travelzen.farerule.rule.Judge)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDiscount();
      } else {
        setDiscount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PASSENGER_TYPE:
      return getPassengerType();

    case MIN_AGE:
      return Integer.valueOf(getMinAge());

    case MAX_AGE:
      return Integer.valueOf(getMaxAge());

    case ACCOMPANIED:
      return getAccompanied();

    case HAS_SEAT:
      return getHasSeat();

    case DISCOUNT:
      return Integer.valueOf(getDiscount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PASSENGER_TYPE:
      return isSetPassengerType();
    case MIN_AGE:
      return isSetMinAge();
    case MAX_AGE:
      return isSetMaxAge();
    case ACCOMPANIED:
      return isSetAccompanied();
    case HAS_SEAT:
      return isSetHasSeat();
    case DISCOUNT:
      return isSetDiscount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChildInfantDiscountItem)
      return this.equals((ChildInfantDiscountItem)that);
    return false;
  }

  public boolean equals(ChildInfantDiscountItem that) {
    if (that == null)
      return false;

    boolean this_present_passengerType = true && this.isSetPassengerType();
    boolean that_present_passengerType = true && that.isSetPassengerType();
    if (this_present_passengerType || that_present_passengerType) {
      if (!(this_present_passengerType && that_present_passengerType))
        return false;
      if (!this.passengerType.equals(that.passengerType))
        return false;
    }

    boolean this_present_minAge = true && this.isSetMinAge();
    boolean that_present_minAge = true && that.isSetMinAge();
    if (this_present_minAge || that_present_minAge) {
      if (!(this_present_minAge && that_present_minAge))
        return false;
      if (this.minAge != that.minAge)
        return false;
    }

    boolean this_present_maxAge = true && this.isSetMaxAge();
    boolean that_present_maxAge = true && that.isSetMaxAge();
    if (this_present_maxAge || that_present_maxAge) {
      if (!(this_present_maxAge && that_present_maxAge))
        return false;
      if (this.maxAge != that.maxAge)
        return false;
    }

    boolean this_present_accompanied = true && this.isSetAccompanied();
    boolean that_present_accompanied = true && that.isSetAccompanied();
    if (this_present_accompanied || that_present_accompanied) {
      if (!(this_present_accompanied && that_present_accompanied))
        return false;
      if (!this.accompanied.equals(that.accompanied))
        return false;
    }

    boolean this_present_hasSeat = true && this.isSetHasSeat();
    boolean that_present_hasSeat = true && that.isSetHasSeat();
    if (this_present_hasSeat || that_present_hasSeat) {
      if (!(this_present_hasSeat && that_present_hasSeat))
        return false;
      if (!this.hasSeat.equals(that.hasSeat))
        return false;
    }

    boolean this_present_discount = true && this.isSetDiscount();
    boolean that_present_discount = true && that.isSetDiscount();
    if (this_present_discount || that_present_discount) {
      if (!(this_present_discount && that_present_discount))
        return false;
      if (this.discount != that.discount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ChildInfantDiscountItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ChildInfantDiscountItem typedOther = (ChildInfantDiscountItem)other;

    lastComparison = Boolean.valueOf(isSetPassengerType()).compareTo(typedOther.isSetPassengerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassengerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passengerType, typedOther.passengerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinAge()).compareTo(typedOther.isSetMinAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minAge, typedOther.minAge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxAge()).compareTo(typedOther.isSetMaxAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxAge, typedOther.maxAge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccompanied()).compareTo(typedOther.isSetAccompanied());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccompanied()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accompanied, typedOther.accompanied);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasSeat()).compareTo(typedOther.isSetHasSeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasSeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasSeat, typedOther.hasSeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscount()).compareTo(typedOther.isSetDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discount, typedOther.discount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChildInfantDiscountItem(");
    boolean first = true;

    if (isSetPassengerType()) {
      sb.append("passengerType:");
      if (this.passengerType == null) {
        sb.append("null");
      } else {
        sb.append(this.passengerType);
      }
      first = false;
    }
    if (isSetMinAge()) {
      if (!first) sb.append(", ");
      sb.append("minAge:");
      sb.append(this.minAge);
      first = false;
    }
    if (isSetMaxAge()) {
      if (!first) sb.append(", ");
      sb.append("maxAge:");
      sb.append(this.maxAge);
      first = false;
    }
    if (isSetAccompanied()) {
      if (!first) sb.append(", ");
      sb.append("accompanied:");
      if (this.accompanied == null) {
        sb.append("null");
      } else {
        sb.append(this.accompanied);
      }
      first = false;
    }
    if (isSetHasSeat()) {
      if (!first) sb.append(", ");
      sb.append("hasSeat:");
      if (this.hasSeat == null) {
        sb.append("null");
      } else {
        sb.append(this.hasSeat);
      }
      first = false;
    }
    if (isSetDiscount()) {
      if (!first) sb.append(", ");
      sb.append("discount:");
      sb.append(this.discount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChildInfantDiscountItemStandardSchemeFactory implements SchemeFactory {
    public ChildInfantDiscountItemStandardScheme getScheme() {
      return new ChildInfantDiscountItemStandardScheme();
    }
  }

  private static class ChildInfantDiscountItemStandardScheme extends StandardScheme<ChildInfantDiscountItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChildInfantDiscountItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PASSENGER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.passengerType = PassengerType.findByValue(iprot.readI32());
              struct.setPassengerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIN_AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minAge = iprot.readI32();
              struct.setMinAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxAge = iprot.readI32();
              struct.setMaxAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOMPANIED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accompanied = com.travelzen.farerule.rule.Judge.findByValue(iprot.readI32());
              struct.setAccompaniedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HAS_SEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasSeat = com.travelzen.farerule.rule.Judge.findByValue(iprot.readI32());
              struct.setHasSeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.discount = iprot.readI32();
              struct.setDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChildInfantDiscountItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.passengerType != null) {
        if (struct.isSetPassengerType()) {
          oprot.writeFieldBegin(PASSENGER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.passengerType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMinAge()) {
        oprot.writeFieldBegin(MIN_AGE_FIELD_DESC);
        oprot.writeI32(struct.minAge);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxAge()) {
        oprot.writeFieldBegin(MAX_AGE_FIELD_DESC);
        oprot.writeI32(struct.maxAge);
        oprot.writeFieldEnd();
      }
      if (struct.accompanied != null) {
        if (struct.isSetAccompanied()) {
          oprot.writeFieldBegin(ACCOMPANIED_FIELD_DESC);
          oprot.writeI32(struct.accompanied.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.hasSeat != null) {
        if (struct.isSetHasSeat()) {
          oprot.writeFieldBegin(HAS_SEAT_FIELD_DESC);
          oprot.writeI32(struct.hasSeat.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDiscount()) {
        oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
        oprot.writeI32(struct.discount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChildInfantDiscountItemTupleSchemeFactory implements SchemeFactory {
    public ChildInfantDiscountItemTupleScheme getScheme() {
      return new ChildInfantDiscountItemTupleScheme();
    }
  }

  private static class ChildInfantDiscountItemTupleScheme extends TupleScheme<ChildInfantDiscountItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChildInfantDiscountItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPassengerType()) {
        optionals.set(0);
      }
      if (struct.isSetMinAge()) {
        optionals.set(1);
      }
      if (struct.isSetMaxAge()) {
        optionals.set(2);
      }
      if (struct.isSetAccompanied()) {
        optionals.set(3);
      }
      if (struct.isSetHasSeat()) {
        optionals.set(4);
      }
      if (struct.isSetDiscount()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPassengerType()) {
        oprot.writeI32(struct.passengerType.getValue());
      }
      if (struct.isSetMinAge()) {
        oprot.writeI32(struct.minAge);
      }
      if (struct.isSetMaxAge()) {
        oprot.writeI32(struct.maxAge);
      }
      if (struct.isSetAccompanied()) {
        oprot.writeI32(struct.accompanied.getValue());
      }
      if (struct.isSetHasSeat()) {
        oprot.writeI32(struct.hasSeat.getValue());
      }
      if (struct.isSetDiscount()) {
        oprot.writeI32(struct.discount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChildInfantDiscountItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.passengerType = PassengerType.findByValue(iprot.readI32());
        struct.setPassengerTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.minAge = iprot.readI32();
        struct.setMinAgeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxAge = iprot.readI32();
        struct.setMaxAgeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accompanied = com.travelzen.farerule.rule.Judge.findByValue(iprot.readI32());
        struct.setAccompaniedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hasSeat = com.travelzen.farerule.rule.Judge.findByValue(iprot.readI32());
        struct.setHasSeatIsSet(true);
      }
      if (incoming.get(5)) {
        struct.discount = iprot.readI32();
        struct.setDiscountIsSet(true);
      }
    }
  }

}

