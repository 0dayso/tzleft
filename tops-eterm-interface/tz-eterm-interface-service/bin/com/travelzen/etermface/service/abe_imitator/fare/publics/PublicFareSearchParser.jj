/** * Author: yangguo */options{  LOOKAHEAD= 1;  CHOICE_AMBIGUITY_CHECK = 2;  OTHER_AMBIGUITY_CHECK = 1;  STATIC = false;  DEBUG_PARSER = false;  DEBUG_LOOKAHEAD = false;  DEBUG_TOKEN_MANAGER = false;  ERROR_REPORTING = true;  JAVA_UNICODE_ESCAPE = false;  UNICODE_INPUT = false;  IGNORE_CASE = false;  USER_TOKEN_MANAGER = false;  USER_CHAR_STREAM = false;  BUILD_PARSER = true;  BUILD_TOKEN_MANAGER = true;  SANITY_CHECK = true;  FORCE_LA_CHECK = false;}PARSER_BEGIN(PublicFareSearchParser)package com.travelzen.cdxg.abe_imitator.fare.publics;import com.travelzen.cdxg.abe_imitator.fare.pojo.CabinInfo;import com.travelzen.cdxg.abe_imitator.fare.pojo.FareSearchResponse;import java.io.ByteArrayInputStream;import java.io.InputStream;public class PublicFareSearchParser{  public static FareSearchResponse parseString(String str) throws Exception  {    InputStream in = new ByteArrayInputStream(str.getBytes("UTF-8"));    PublicFareSearchParser parser = new PublicFareSearchParser(in);    FareSearchResponse fareSearchResponse = parser.analysis();    return fareSearchResponse;  }}PARSER_END(PublicFareSearchParser)SKIP :{  " "| "\r"| "\n"|"."|"/CNY"|"/"}TOKEN :{ <rowNum: (["0"-"9"])+" ">|<city: (["A"-"Z"]){6}>|<date:(["0"-"9"]){2}(["A"-"Z"]){3}(["0"-"9"]){2}>|<journey:<city>"/"<date>"/"(["A"-"Z","0"-"9"]){2}>|< money : ([ "0"-"9" ])+ (".") ([ "0"-"9" ])+ >|< moneyRt : <money> "/" >|<distance : "TPM"(" ")+(["0"-"9"])*(" ")*"/">|<priceId:"/"(["A"-"Z","0"-"9"]){4}" ">|<priceBase:((["A"-"Z","0"-"9"]){2}|"3U")"/"(["A"-"Z","a"-"z","0"-"9"])+("/"(["0"-"9"]){1,3})?>|<rowEnd:"PFN:"(["0"-"9"]){1,3}>|<pageEnd:"PAGE "(["0"-"9"])+"/"(["0"-"9"])+>|<bookClass : [ "A"-"Z","a"-"z" ] >}FareSearchResponse analysis() :{  FareSearchResponse fareSearchResponse = new FareSearchResponse();}{  (    execute(fareSearchResponse)  )*  {    return fareSearchResponse;  }}void execute(FareSearchResponse fareSearchResponse) :{  Token token;  CabinInfo cabinInfo;}{  "(PFD"  (token = < journey >)  "FD:"  (token = <journey>)  {     String value1=token.image.replaceAll(" ","");     String[] value2=value1.split("/");     fareSearchResponse.setFromAirPort(value2[0].substring(0,3));     fareSearchResponse.setToAirPort(value2[0].substring(3,6));     fareSearchResponse.setFromDate(value2[1]);     fareSearchResponse.setAirLine(value2[2]);  }  (token=<distance>)  {      String value3=token.image.replaceAll(" ","");      fareSearchResponse.setDistance(value3.replaceAll("TPM","").replaceAll("/","").trim());  }  (    cabinInfo = row(fareSearchResponse)  )*  (    token=<pageEnd>  )}CabinInfo row(FareSearchResponse fareSearchResponse) :{  Token token;  CabinInfo cabinInfo = new CabinInfo();}{  (token = < rowNum >)  {    cabinInfo.setIndex(token.image.replaceAll(" ",""));  }  (token = < priceBase >)  {    String priceBase=token.image.replaceAll(" ","");    String[] priceBaseElements=priceBase.split("/");    cabinInfo.setAirLine(priceBaseElements[0]);    cabinInfo.setFareBasis(priceBaseElements[1]);    if(priceBaseElements.length==3){      cabinInfo.setDiscout(Integer.valueOf(priceBaseElements[2]));    }  }  //如果一个正则表达式即一个token不好表示，就拆分成多个  (      token = < money >      {        cabinInfo.setOwFare(token.image);      }  )?  ("=")?  (      token = < moneyRt >      {        String rtFare = token.image.replaceAll("/", "");        cabinInfo.setRtFare(rtFare);      }  )?  (token = < bookClass >)  {      cabinInfo.setCabinCode(token.image);  }  (token = < bookClass >)  {      cabinInfo.setCabinLevel(token.image);  }  (token = < date>)  {    cabinInfo.setEffectiveStartDate(token.image);  }  (token = <priceId>)  (token = < rowEnd>)  {      fareSearchResponse.addCabinInFo(cabinInfo);      fareSearchResponse.setSuccess(true);      return cabinInfo;  }}