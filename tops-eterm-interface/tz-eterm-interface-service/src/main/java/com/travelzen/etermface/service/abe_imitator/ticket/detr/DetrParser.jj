/**
 * @author guohua.xue
 * parser the result  of th "av h..." command. 
 *
 *
 *
 */options{  LOOKAHEAD= 1;  CHOICE_AMBIGUITY_CHECK = 2;  OTHER_AMBIGUITY_CHECK = 1;  STATIC = true;  DEBUG_PARSER = false;  DEBUG_LOOKAHEAD = false;  DEBUG_TOKEN_MANAGER = false;  ERROR_REPORTING = true;  JAVA_UNICODE_ESCAPE = false;  UNICODE_INPUT = false;  IGNORE_CASE = false;  USER_TOKEN_MANAGER = false;  USER_CHAR_STREAM = false;  BUILD_PARSER = true;  BUILD_TOKEN_MANAGER = true;  SANITY_CHECK = true;  FORCE_LA_CHECK = false;}PARSER_BEGIN(DetrParser)package com.travelzen.cdxg.abe_imitator.ticket.detr;import com.travelzen.cdxg.abe_imitator.ticket.pojo.TicketFlight;import com.thoughtworks.xstream.XStream;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.File;import java.io.FileReader;import java.io.InputStream;import java.util.ArrayList;import java.util.Date;import java.util.List;public class DetrParser{  private static int pageNum = 0;  //all av result num
  private static int rowNum = 0;  // num of one page
  private static int elementNo = 0;  private static DetrParser parser = null;  private static Date departureDate = new Date();  /** Main entry point. */  public static void main(String args []) throws Exception  {    BufferedReader reader = new BufferedReader(new FileReader(new File("/home/guohuaxue/Documents/样例数据/ ticketFlight")));    String line;    String rs = "";    while ((line = reader.readLine()) != null)    {      rs = rs + line + "\r";    }    InputStream in = new ByteArrayInputStream(rs.getBytes("UTF-8"));    DetrParser parser = new DetrParser(in);    String reqDate = "20130530";    List < TicketFlight > ticketFlights = parser.analysis();    XStream xstream = new XStream();    System.out.println(xstream.toXML(ticketFlights));  }  public static List < TicketFlight > parseString(String str) throws Exception  {    InputStream in = new ByteArrayInputStream(str.getBytes("UTF-8"));    DetrParser parser = new DetrParser(in);    List < TicketFlight > ticketFlights = parser.analysis();    return ticketFlights;  }}PARSER_END(DetrParser)SKIP :{  "\r"}/**
 * PointAT TODO(guohuaxue):
| <:"REFOUND" >
| <:"CHANGE" >
| <:"EXCHANGED" >
 *
 */TOKEN :{  < letter : [ "A"-"Z" ] >| < number : [ "0"-"9" ] >| < city : [ "A"-"Z" ] [ "A"-"Z" ] [ "A"-"Z" ] >| < flightNoOrtime : [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ] >| < date : [ "0"-"9" ] [ "0"-"9" ] [ "A"-"Z" ] [ "A"-"Z" ] [ "A"-"Z" ] >| < allow :    ([ "0"-"9" ])+    (      "K"    | "PC"    ) >| < at : "--" >| < dFltStatusMsgOrword :    [ "0"-"9" ]    (      [ "0"-"9", "A"-"Z" ]    | "/"    )    (      [ "0"-"9", "A"-"Z" ]    | "."    | "/"    )+ >| < lFltStatusMsgOrword :    [ "A"-"Z" ]    (      [ "0"-"9", "A"-"Z" ]    | "/"    )    (      [ "0"-"9", "A"-"Z" ]    | "."    | "/"    | "-"    )+ >| < carrierOrStatusOrAt : [ "A"-"Z", "0"-"9" ] [ "A"-"Z", "0"-"9" ] >| < fltStatusMsg :    "USED/FLOWN"  | "CHECKED IN"  | "OPEN FOR USE"  | "AIRPORT CNTL"  | "FIM EXCH"  | "LFET/ABOARD"  | "PAPER TICKET"  | "LIFT/BOARDED"  | "PRINT/EXCH"  | "PRINT EXCH"  | "CPN NOTE"  | "STATUS ="  | "REFUNDED"  | "SUSPENDED"  | "EXCHANGED"  | "CHANGE"  | "LFET/ABOARD"  | "CHECK IN"  | "REFOUND"  | "OPRN FOR USE" >}/** Root production. */List < TicketFlight > analysis() :{  List < TicketFlight > ticketFlights = new ArrayList < TicketFlight > ();  TicketFlight ticketFlight;}{  (    ticketFlight = ticketFlightFm()    {      ticketFlights.add(ticketFlight);    }  )*  (    ticketFlight = ticketFlightTo()    {      ticketFlights.add(ticketFlight);    }  )  {    return ticketFlights;    //    System.out.println("start analysis!");    //    System.out.println("pages: " + pageNum);  }}TicketFlight ticketFlightFm() :{  Token token;  TicketFlight ticketFlight = new TicketFlight();  int i = 0;  String ats = "";}{  (token = < letter >)  {    ticketFlight.setStartType(token.image);  }  (" ")*  (    "FM:"  | "TO:"  )  (    (      token = < dFltStatusMsgOrword > (" ")    )  |    (      token = < number > (" ") (" ") (" ") (" ")    )  )  {    String idAndCity = token.image;    if (idAndCity != null && idAndCity.length() > 0)    {      ticketFlight.setID(idAndCity.substring(0, 1));      ticketFlight.setAirport(idAndCity.substring(1));    }  }  (    (      (token = < carrierOrStatusOrAt >)?      {        ticketFlight.setCarrier(token.image.trim());      }      (" ") (" ")?      (        (token = < carrierOrStatusOrAt >)        {          ticketFlight.setShareCarrier(token.image.trim());        }      )?      (" ")+      (        token = < dFltStatusMsgOrword >      | token = < flightNoOrtime >      | token = < carrierOrStatusOrAt >      | token = < number >      | token = "VOID "      | token = "OPEN "      )      {        ticketFlight.setFlight(token.image);      }      (" ")* (token = < letter >      {        ticketFlight.Class = token.image;      }      )? (" ")*      (        (          token = < date >        | token = < dFltStatusMsgOrword >        | token = "VOID "        | token = "OPEN "        )        {          ticketFlight.setDate(token.image);        }        (" ") (" ")?        (          (token = < flightNoOrtime >)          {            ticketFlight.setTime(token.image);          }        | (" ") (" ") (" ") (" ")        )        (" ")?        (          (            token = < carrierOrStatusOrAt >            {              ticketFlight.setStatus(token.image.trim());            }          )?        )      )      (" ")*      (        (          token = < letter >        | token = < lFltStatusMsgOrword >        | token = < city >        | token = < carrierOrStatusOrAt >        )        (" ")*        {          ticketFlight.setFarebasis(token.image);          ticketFlight.setFltStatusMsg(token.image);        }      )?      (        ("/"        {          i++;        }        )? token = < dFltStatusMsgOrword > (" ")*        {          String str = token.image;          ticketFlight.setFltStatusMsg(token.image);          String notValidBef = "";          String notValidAft = "";          if (i != 0)          {            ticketFlight.setNotValidAft(token.image);            i = 0;          }          else          {            int index = str.indexOf("/");            if (index == 0)            {              notValidAft = str.replaceFirst("/", "");            }            else if (index == str.length() - 1)            {              notValidBef = str.replaceFirst("/", "");            }            else            {              notValidBef = str.substring(0, index);              notValidAft = str.substring(index + 1);            }            ticketFlight.setNotValidBef(notValidBef);            ticketFlight.setNotValidAft(notValidAft);          }        }      )?      (        (          token = < allow >        | token = < city >        | token = < carrierOrStatusOrAt >        )        {          ticketFlight.setAllow(token.image);          //          System.out.println(token.image);        }      )?      (" ")*      (        (          token = < lFltStatusMsgOrword >        | token = < fltStatusMsg >        | token = "VOID "        )        {          ticketFlight.setFltStatusMsg(token.image);        }      )?      (" ")*      (        (          token = < lFltStatusMsgOrword >        | token = < dFltStatusMsgOrword >        | token = < city >        )        (" ")*        {          ats = token.image;        }      |        (          (token = < number > " ")          {            ats = ats + token.image + " ";          }        | (token = < carrierOrStatusOrAt >)          {            ats = ats + token.image.trim();          }        | (token = < at >)          {            ats = ats + token.image;          }        | (token = < letter > " ")          {            ats = ats + token.image + " ";          }        )*        (" "        {          i++;        }        )*      )      {        String boardPointAt = "";        String offpointAt = "";        if (ats.length() == 4 || ats.length() == 3)        {          boardPointAt = ats.substring(0, 2);          offpointAt = ats.substring(2);        }        else if (ats.length() == 2)        {          if (i <= 1)          {            offpointAt = ats;          }          else          {            boardPointAt = ats;          }        }        ticketFlight.setAirportTerminal(ats);        ticketFlight.setBoardPointAT(boardPointAt.trim());        ticketFlight.setOffpointAT(offpointAt.trim());      }    )  )  (    "RL:" (" ")*  )  (    (      token = < dFltStatusMsgOrword >    | token = < lFltStatusMsgOrword >    )    {      ticketFlight.setPNR(token.image);    }    (" ")*  )?  ("/")? (" ")*  (    (      token = < dFltStatusMsgOrword >    | token = < lFltStatusMsgOrword >    )    {      String icsPnrAndGds = token.image;      if (icsPnrAndGds.length() > 6)      {        ticketFlight.setICSPNR(icsPnrAndGds.substring(0, 6));        ticketFlight.setGDS(icsPnrAndGds.substring(6));      }    }    (" ")*  )?  {    return ticketFlight;  }}TicketFlight ticketFlightTo() :{  TicketFlight ticketFlight = new TicketFlight();}{  (" ")* ("TO:") (" ")* (token = < city >)?  {    ticketFlight.setAirport(token.image);  }  {    return ticketFlight;  }}