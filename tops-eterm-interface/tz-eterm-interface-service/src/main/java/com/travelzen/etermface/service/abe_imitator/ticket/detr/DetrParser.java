/* Generated By:JavaCC: Do not edit this line. DetrParser.java */
package com.travelzen.etermface.service.abe_imitator.ticket.detr;
import com.travelzen.etermface.service.abe_imitator.ticket.pojo.TicketFlight;
import com.thoughtworks.xstream.XStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileReader;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class DetrParser implements DetrParserConstants {
  private static int pageNum = 0;

  //all av result num
  private static int rowNum = 0;

  // num of one page
  private static int elementNo = 0;

  private static DetrParser parser = null;

  private static Date departureDate = new Date();

  /** Main entry point. */
  public static void main(String args []) throws Exception
  {
    BufferedReader reader = new BufferedReader(new FileReader(new File("/home/guohuaxue/Documents/\u6837\u4f8b\u6570\u636e/ ticketFlight")));
    String line;
    String rs = "";
    while ((line = reader.readLine()) != null)
    {
      rs = rs + line + "\u005cr";
    }
    InputStream in = new ByteArrayInputStream(rs.getBytes("UTF-8"));
    DetrParser parser = new DetrParser(in);
    String reqDate = "20130530";
    List < TicketFlight > ticketFlights = parser.analysis();
    XStream xstream = new XStream();
    System.out.println(xstream.toXML(ticketFlights));
  }

  public static List < TicketFlight > parseString(String str) throws Exception
  {
    InputStream in = new ByteArrayInputStream(str.getBytes("UTF-8"));
    DetrParser parser = new DetrParser(in);
    List < TicketFlight > ticketFlights = parser.analysis();
    return ticketFlights;
  }

/** Root production. */
  static final public List < TicketFlight > analysis() throws ParseException {
  List < TicketFlight > ticketFlights = new ArrayList < TicketFlight > ();
  TicketFlight ticketFlight;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case letter:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ticketFlight = ticketFlightFm();
      ticketFlights.add(ticketFlight);
    }
    ticketFlight = ticketFlightTo();
      ticketFlights.add(ticketFlight);
    {if (true) return ticketFlights;}
    //    System.out.println("start analysis!");
    //    System.out.println("pages: " + pageNum);

    throw new Error("Missing return statement in function");
  }

  static final public TicketFlight ticketFlightFm() throws ParseException {
  Token token;
  TicketFlight ticketFlight = new TicketFlight();
  int i = 0;
  String ats = "";
    token = jj_consume_token(letter);
    ticketFlight.setStartType(token.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(13);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      jj_consume_token(14);
      break;
    case 15:
      jj_consume_token(15);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case dFltStatusMsgOrword:
      token = jj_consume_token(dFltStatusMsgOrword);
      jj_consume_token(13);
      break;
    case number:
      token = jj_consume_token(number);
      jj_consume_token(13);
      jj_consume_token(13);
      jj_consume_token(13);
      jj_consume_token(13);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    String idAndCity = token.image;
    if (idAndCity != null && idAndCity.length() > 0)
    {
      ticketFlight.setID(idAndCity.substring(0, 1));
      ticketFlight.setAirport(idAndCity.substring(1));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case carrierOrStatusOrAt:
      token = jj_consume_token(carrierOrStatusOrAt);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
        ticketFlight.setCarrier(token.image.trim());
    jj_consume_token(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case carrierOrStatusOrAt:
      token = jj_consume_token(carrierOrStatusOrAt);
          ticketFlight.setShareCarrier(token.image.trim());
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      jj_consume_token(13);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case dFltStatusMsgOrword:
      token = jj_consume_token(dFltStatusMsgOrword);
      break;
    case flightNoOrtime:
      token = jj_consume_token(flightNoOrtime);
      break;
    case carrierOrStatusOrAt:
      token = jj_consume_token(carrierOrStatusOrAt);
      break;
    case number:
      token = jj_consume_token(number);
      break;
    case 16:
      token = jj_consume_token(16);
      break;
    case 17:
      token = jj_consume_token(17);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        ticketFlight.setFlight(token.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(13);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case letter:
      token = jj_consume_token(letter);
        ticketFlight.Class = token.image;
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(13);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case date:
      token = jj_consume_token(date);
      break;
    case dFltStatusMsgOrword:
      token = jj_consume_token(dFltStatusMsgOrword);
      break;
    case 16:
      token = jj_consume_token(16);
      break;
    case 17:
      token = jj_consume_token(17);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          ticketFlight.setDate(token.image);
    jj_consume_token(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case flightNoOrtime:
      token = jj_consume_token(flightNoOrtime);
            ticketFlight.setTime(token.image);
      break;
    case 13:
      jj_consume_token(13);
      jj_consume_token(13);
      jj_consume_token(13);
      jj_consume_token(13);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case carrierOrStatusOrAt:
      token = jj_consume_token(carrierOrStatusOrAt);
              ticketFlight.setStatus(token.image.trim());
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(13);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case letter:
    case city:
    case lFltStatusMsgOrword:
    case carrierOrStatusOrAt:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case letter:
        token = jj_consume_token(letter);
        break;
      case lFltStatusMsgOrword:
        token = jj_consume_token(lFltStatusMsgOrword);
        break;
      case city:
        token = jj_consume_token(city);
        break;
      case carrierOrStatusOrAt:
        token = jj_consume_token(carrierOrStatusOrAt);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        jj_consume_token(13);
      }
          ticketFlight.setFarebasis(token.image);
          ticketFlight.setFltStatusMsg(token.image);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case dFltStatusMsgOrword:
    case 18:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        jj_consume_token(18);
          i++;
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      token = jj_consume_token(dFltStatusMsgOrword);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_8;
        }
        jj_consume_token(13);
      }
          String str = token.image;
          ticketFlight.setFltStatusMsg(token.image);
          String notValidBef = "";
          String notValidAft = "";
          if (i != 0)
          {
            ticketFlight.setNotValidAft(token.image);
            i = 0;
          }
          else
          {
            int index = str.indexOf("/");
            if (index == 0)
            {
              notValidAft = str.replaceFirst("/", "");
            }
            else if (index == str.length() - 1)
            {
              notValidBef = str.replaceFirst("/", "");
            }
            else
            {
              notValidBef = str.substring(0, index);
              notValidAft = str.substring(index + 1);
            }
            ticketFlight.setNotValidBef(notValidBef);
            ticketFlight.setNotValidAft(notValidAft);
          }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case city:
    case allow:
    case carrierOrStatusOrAt:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case allow:
        token = jj_consume_token(allow);
        break;
      case city:
        token = jj_consume_token(city);
        break;
      case carrierOrStatusOrAt:
        token = jj_consume_token(carrierOrStatusOrAt);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          ticketFlight.setAllow(token.image);
          //          System.out.println(token.image);

      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_9;
      }
      jj_consume_token(13);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lFltStatusMsgOrword:
    case fltStatusMsg:
    case 16:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case lFltStatusMsgOrword:
        token = jj_consume_token(lFltStatusMsgOrword);
        break;
      case fltStatusMsg:
        token = jj_consume_token(fltStatusMsg);
        break;
      case 16:
        token = jj_consume_token(16);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          ticketFlight.setFltStatusMsg(token.image);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_10;
      }
      jj_consume_token(13);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case city:
    case dFltStatusMsgOrword:
    case lFltStatusMsgOrword:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case lFltStatusMsgOrword:
        token = jj_consume_token(lFltStatusMsgOrword);
        break;
      case dFltStatusMsgOrword:
        token = jj_consume_token(dFltStatusMsgOrword);
        break;
      case city:
        token = jj_consume_token(city);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_11;
        }
        jj_consume_token(13);
      }
          ats = token.image;
      break;
    default:
      jj_la1[35] = jj_gen;
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case letter:
        case number:
        case at:
        case carrierOrStatusOrAt:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case number:
          token = jj_consume_token(number);
          jj_consume_token(13);
            ats = ats + token.image + " ";
          break;
        case carrierOrStatusOrAt:
          token = jj_consume_token(carrierOrStatusOrAt);
            ats = ats + token.image.trim();
          break;
        case at:
          token = jj_consume_token(at);
            ats = ats + token.image;
          break;
        case letter:
          token = jj_consume_token(letter);
          jj_consume_token(13);
            ats = ats + token.image + " ";
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_13;
        }
        jj_consume_token(13);
          i++;
      }
    }
        String boardPointAt = "";
        String offpointAt = "";
        if (ats.length() == 4 || ats.length() == 3)
        {
          boardPointAt = ats.substring(0, 2);
          offpointAt = ats.substring(2);
        }
        else if (ats.length() == 2)
        {
          if (i <= 1)
          {
            offpointAt = ats;
          }
          else
          {
            boardPointAt = ats;
          }
        }
        ticketFlight.setAirportTerminal(ats);
        ticketFlight.setBoardPointAT(boardPointAt.trim());
        ticketFlight.setOffpointAT(offpointAt.trim());
    jj_consume_token(19);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_14;
      }
      jj_consume_token(13);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case dFltStatusMsgOrword:
    case lFltStatusMsgOrword:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case dFltStatusMsgOrword:
        token = jj_consume_token(dFltStatusMsgOrword);
        break;
      case lFltStatusMsgOrword:
        token = jj_consume_token(lFltStatusMsgOrword);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ticketFlight.setPNR(token.image);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_15;
        }
        jj_consume_token(13);
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_16;
      }
      jj_consume_token(13);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case dFltStatusMsgOrword:
    case lFltStatusMsgOrword:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case dFltStatusMsgOrword:
        token = jj_consume_token(dFltStatusMsgOrword);
        break;
      case lFltStatusMsgOrword:
        token = jj_consume_token(lFltStatusMsgOrword);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      String icsPnrAndGds = token.image;
      if (icsPnrAndGds.length() > 6)
      {
        ticketFlight.setICSPNR(icsPnrAndGds.substring(0, 6));
        ticketFlight.setGDS(icsPnrAndGds.substring(6));
      }
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_17;
        }
        jj_consume_token(13);
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    {if (true) return ticketFlight;}
    throw new Error("Missing return statement in function");
  }

  static final public TicketFlight ticketFlightTo() throws ParseException {
  TicketFlight ticketFlight = new TicketFlight();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_18;
      }
      jj_consume_token(13);
    }
    jj_consume_token(15);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_19;
      }
      jj_consume_token(13);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case city:
      token = jj_consume_token(city);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    ticketFlight.setAirport(token.image);
    {if (true) return ticketFlight;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public DetrParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[48];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4,0x2000,0xc000,0x208,0x800,0x2000,0x800,0x2000,0x30a28,0x2000,0x4,0x2000,0x30240,0x2000,0x2020,0x2000,0x800,0x2000,0xc14,0x2000,0xc14,0x40000,0x2000,0x40200,0x890,0x890,0x2000,0x11400,0x11400,0x2000,0x610,0x2000,0x90c,0x90c,0x2000,0x610,0x2000,0x600,0x2000,0x600,0x40000,0x2000,0x600,0x2000,0x600,0x2000,0x2000,0x10,};
   }

  /** Constructor with InputStream. */
  public DetrParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DetrParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DetrParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DetrParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DetrParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DetrParser(DetrParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DetrParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 48; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
