/* Generated By:JavaCC: Do not edit this line. PublicFareSearchParser.java */
package com.travelzen.etermface.service.abe_imitator.fare.publics;
import com.travelzen.etermface.service.abe_imitator.fare.pojo.CabinInfo;
import com.travelzen.etermface.service.abe_imitator.fare.pojo.FareSearchResponse;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class PublicFareSearchParser implements PublicFareSearchParserConstants {
  public static FareSearchResponse parseString(String str) throws Exception
  {
    InputStream in = new ByteArrayInputStream(str.getBytes("UTF-8"));
    PublicFareSearchParser parser = new PublicFareSearchParser(in);
    FareSearchResponse fareSearchResponse = parser.analysis();
    return fareSearchResponse;
  }

  final public FareSearchResponse analysis() throws ParseException {
  FareSearchResponse fareSearchResponse = new FareSearchResponse();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      execute(fareSearchResponse);
    }
    {if (true) return fareSearchResponse;}
    throw new Error("Missing return statement in function");
  }

  final public void execute(FareSearchResponse fareSearchResponse) throws ParseException {
  Token token;
  CabinInfo cabinInfo;
    jj_consume_token(19);
    token = jj_consume_token(journey);
    jj_consume_token(20);
    token = jj_consume_token(journey);
     String value1=token.image.replaceAll(" ","");
     String[] value2=value1.split("/");
     fareSearchResponse.setFromAirPort(value2[0].substring(0,3));
     fareSearchResponse.setToAirPort(value2[0].substring(3,6));
     fareSearchResponse.setFromDate(value2[1]);
     fareSearchResponse.setAirLine(value2[2]);
    token = jj_consume_token(distance);
      String value3=token.image.replaceAll(" ","");
      fareSearchResponse.setDistance(value3.replaceAll("TPM","").replaceAll("/","").trim());
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case rowNum:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      cabinInfo = row(fareSearchResponse);
    }
    token = jj_consume_token(pageEnd);
  }

  final public CabinInfo row(FareSearchResponse fareSearchResponse) throws ParseException {
  Token token;
  CabinInfo cabinInfo = new CabinInfo();
    token = jj_consume_token(rowNum);
    cabinInfo.setIndex(token.image.replaceAll(" ",""));
    token = jj_consume_token(priceBase);
    String priceBase=token.image.replaceAll(" ","");
    String[] priceBaseElements=priceBase.split("/");
    cabinInfo.setAirLine(priceBaseElements[0]);
    cabinInfo.setFareBasis(priceBaseElements[1]);
    if(priceBaseElements.length==3){
      cabinInfo.setDiscout(Integer.valueOf(priceBaseElements[2]));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case money:
      token = jj_consume_token(money);
        cabinInfo.setOwFare(token.image);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case moneyRt:
      token = jj_consume_token(moneyRt);
        String rtFare = token.image.replaceAll("/", "");
        cabinInfo.setRtFare(rtFare);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    token = jj_consume_token(bookClass);
      cabinInfo.setCabinCode(token.image);
    token = jj_consume_token(bookClass);
      cabinInfo.setCabinLevel(token.image);
    token = jj_consume_token(date);
    cabinInfo.setEffectiveStartDate(token.image);
    token = jj_consume_token(priceId);
    token = jj_consume_token(rowEnd);
      fareSearchResponse.addCabinInFo(cabinInfo);
      fareSearchResponse.setSuccess(true);
      {if (true) return cabinInfo;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PublicFareSearchParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x80,0x800,0x200000,0x1000,};
   }

  /** Constructor with InputStream. */
  public PublicFareSearchParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PublicFareSearchParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PublicFareSearchParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PublicFareSearchParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PublicFareSearchParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PublicFareSearchParser(PublicFareSearchParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PublicFareSearchParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
