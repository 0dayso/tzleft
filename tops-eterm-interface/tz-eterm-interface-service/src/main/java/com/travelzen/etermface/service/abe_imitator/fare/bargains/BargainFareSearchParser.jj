/** * Copyright 2013 Travelzen Inc. All Rights Reserved. * Author: m18621298620@163.com (guohua xue) */ options {   LOOKAHEAD = 1;   CHOICE_AMBIGUITY_CHECK = 2;   OTHER_AMBIGUITY_CHECK = 1;   STATIC = true;   DEBUG_PARSER = false;   DEBUG_LOOKAHEAD = false;   DEBUG_TOKEN_MANAGER = false;   ERROR_REPORTING = true;   JAVA_UNICODE_ESCAPE = false;   UNICODE_INPUT = false;   IGNORE_CASE = false;   USER_TOKEN_MANAGER = false;   USER_CHAR_STREAM = false;   BUILD_PARSER = true;   BUILD_TOKEN_MANAGER = true;   SANITY_CHECK = true;   FORCE_LA_CHECK = false; }PARSER_BEGIN(BargainFareSearchParser)package com.travelzen.cdxg.abe_imitator.fare.bargains;import java.io.ByteArrayInputStream;import java.io.InputStream;import com.travelzen.cdxg.abe_imitator.fare.pojo.CabinInfo;import com.travelzen.cdxg.abe_imitator.fare.pojo.FareSearchResponse;public class BargainFareSearchParser{  private  int pageNum = 0;  public static FareSearchResponse parseString(String str) throws Exception  {    InputStream in = new ByteArrayInputStream(str.getBytes("UTF-8"));    BargainFareSearchParser parser = new BargainFareSearchParser(in);    FareSearchResponse fareSearchResponse = parser.analysis();    return fareSearchResponse;  }}PARSER_END(BargainFareSearchParser)SKIP :{  " "| "\r"| "*"| "."}/** * PointAT TODO(guohuaxue): * PointAT contains three type,such as : "E "(electronOrPointAT),"3 "(indexOrPointAT), "--"(unScheduledSeatOrPointAT),"T1"(unScheduledSeatOrPointAT); *| < segment :    [ "A"-"Z" ] [ "A"-"Z" ] [ "A"-"Z" ]    (      ("-") [ "A"-"Z" ] [ "A"-"Z" ] [ "A"-"Z", "*" ]    )+ > *|<time:["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]("+1")?> | < date : [ "0"-"9" ] [ "0"-"9" ] [ "A"-"Z" ] [ "A"-"Z" ] [ "A"-"Z" ] [ "0"-"9" ] [ "0"-"9" ] > */TOKEN :{  < PageStrart : "(NFD" >| < stayDay : ("/")? [ "0"-"9" ] [ "0"-"9" ] "D" ("/" [ "0"-"9" ] [ "0"-"9" ] "D")? >| < indexInfo : [ "0"-"9" ] [ "0"-"9" ] >| < carrier :    ([ "A"-"Z" ] [ "A"-"Z" ])  | ([ "0"-"9" ] [ "A"-"Z" ])  | ([ "A"-"Z" ] [ "0"-"9" ]) >| < bookClass : [ "A"-"Z" ] ("/" [ "A"-"Z" ])* >| < money : ([ "0"-"9" ])+ (".") ([ "0"-"9" ])+ >| < blanks : (" ") (" ") (" ") (" ") (" ") (" ")* >| < word : [ "0"-"9", "A"-"Z" ] [ "0"-"9", "A"-"Z" ] ([ "0"-"9", "A"-"Z", "/", "*", "-" ])* ([ "0"-"9", "A"-"Z", "/", "*" ]) >| < nfn : [ "A"-"Z" ] [ "A"-"Z" ] [ "A"-"Z" ] ":" [ "0"-"9" ] [ "0"-"9" ] >}/** Root production. */FareSearchResponse analysis() :{  FareSearchResponse fareSearchResponse = new FareSearchResponse();  int index = 0;}{  (    index = pages(fareSearchResponse, index)    {      ++pageNum;      System.out.println("第"+pageNum+"页分析完成");    }  )*  {    return fareSearchResponse;  }}/** Brace matching production. */int pages(FareSearchResponse fareSearchResponse, int index) :{  Token token;  CabinInfo cabinInfo;}{  (token = < PageStrart >) (token = < word >) (token = < word >) (token = < word >) ("-" token = < word >) (token = < blanks >) ("TAX(ES) NOT INCLUDED") (token = < word >)  {    fareSearchResponse.setFromDate(token.image);  }  (token = < word >) ("LN  CXR  OW       RT       FBC/TC      RBD MIN/MAX TRVDATE         R")  (    cabinInfo = row()    {      fareSearchResponse.addCabinInFo(cabinInfo);    }  |    (      (        token = < word >        {            String ticketTimeLimit = token.image;          if (ticketTimeLimit != null)          {             fareSearchResponse.getCabinInfos().get(fareSearchResponse.getCabinInfos().size() - 1).setTicketTimeLimit(ticketTimeLimit);          }        }      )    )  )*  {    return index;  }}CabinInfo row() :{  Token token;  Token blankInfo = null;  Token segments = null;  CabinInfo cabinInfo = new CabinInfo();}{  (token = < indexInfo >)  {    cabinInfo.setIndex(token.image);  }  (    token = < carrier >  | token = < indexInfo >  )  {    cabinInfo.setAirLine(token.image);  }  (    moneyMatch(cabinInfo)  )  (    (      (        token = < word >      | token = < carrier >      | token = < bookClass >      )      {        cabinInfo.setFareBasis(token.image);      }      (< blanks >)?      (        (          token = < bookClass >        | token = < carrier >        | token = < word >        | token = < indexInfo >        )        {          cabinInfo.setFareBasis(cabinInfo.getFareBasis() + token.image);        }      )?      (< blanks >)?      (        token = < bookClass >        {          cabinInfo.setFareBasis(cabinInfo.getFareBasis() + token.image);        }      )?      (        token = < bookClass >        {          cabinInfo.setFareBasis(cabinInfo.getFareBasis() + token.image);        }      )?      {        cabinInfo.setCabinLevel(token.image);      }    )  )  (    token = < stayDay >    {      String stayInfo = token.image;      if (stayInfo == null)      {        stayInfo = "";      }      if (!stayInfo.contains("/") || stayInfo.endsWith("/"))      {        cabinInfo.setMinStaty(token.image);      }      else if (stayInfo.startsWith("/"))      {        cabinInfo.setMaxStaty(stayInfo.substring(1));      }      else      {        int index = stayInfo.indexOf("/");        cabinInfo.setMinStaty(stayInfo.substring(0, index));        cabinInfo.setMaxStaty(stayInfo.substring(index + 1));      }    }  | < blanks >  )?  (token = < word >) ("-")?  {    String dateInfo = token.image;    if (dateInfo == null)    {      dateInfo = "";    }    if (!dateInfo.contains("-") || dateInfo.endsWith("-"))    {      cabinInfo.setEffectiveStartDate(token.image);    }    else if (dateInfo.startsWith("-"))    {      cabinInfo.setEffectiveEndDate(dateInfo.substring(1));    }    else    {      int index = dateInfo.indexOf("-");      cabinInfo.setEffectiveStartDate(dateInfo.substring(0, index));      cabinInfo.setEffectiveEndDate(dateInfo.substring(index + 1));    }  }  (< blanks >)?  (    (token = < nfn >)  )?  (token = < blanks >)?  (    token = < word > (blankInfo = < blanks >)? (segments = < nfn >)?    {      String ticketTimeLimit = token.image;      if (ticketTimeLimit.startsWith("AP") || ticketTimeLimit.startsWith("ap"))      {        cabinInfo.setTicketTimeLimit(token.image);      }      else if (segments != null && blankInfo == null)      {        String fileNum = cabinInfo.getFileNum();        if (fileNum == null)        {          fileNum = "";        }        fileNum = fileNum + ticketTimeLimit;      }      else      {        cabinInfo.setSegment(token.image);      }    }  )?  (    (      (        token = < word >      | token = < bookClass >      | token = < carrier >      )      {        String blankString = "";        if (blankInfo != null)        {          blankString = blankInfo.image;        }        if (blankString.length() > 35)        {          cabinInfo.setSegment(token.image);        }        else        {          String fileNum = cabinInfo.getFileNum();          if (fileNum == null)          {            fileNum = "";          }          fileNum = fileNum + token.image;          cabinInfo.setFileNum(fileNum);        }      }    )    (      segments = < word >      {        cabinInfo.setSegment(segments.image);      }    )?    (< blanks >)? (< nfn >)?  )*  {    return cabinInfo;  }}void moneyMatch(CabinInfo cabinInfo) :{  Token token;  Token token1;}{  (    token = < money >    {      cabinInfo.setOwFare(token.image);    }  | token = < blanks >  )  (    token1 = < money >    {      cabinInfo.setRtFare(token1.image);    }  | token1 = < blanks >  )  (< blanks >)?}