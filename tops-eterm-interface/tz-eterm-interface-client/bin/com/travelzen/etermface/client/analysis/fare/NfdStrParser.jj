/** * Created by IntelliJ IDEA * User:杨果 * Date:15/4/14 * Time:下午2:26 * <p/> * Description: * 解析nfd文本除去nfn项 * *15-6-9:新增特殊运价基础W/CA0Z143*，对应fareBase */ options {   LOOKAHEAD = 1;   CHOICE_AMBIGUITY_CHECK = 2;   OTHER_AMBIGUITY_CHECK = 1;   STATIC = false;   DEBUG_PARSER = true;   DEBUG_LOOKAHEAD = false;   DEBUG_TOKEN_MANAGER = false;   ERROR_REPORTING = true;   JAVA_UNICODE_ESCAPE = false;   UNICODE_INPUT = false;   IGNORE_CASE = false;   USER_TOKEN_MANAGER = false;   USER_CHAR_STREAM = false;   BUILD_PARSER = true;   BUILD_TOKEN_MANAGER = true;   SANITY_CHECK = true;   FORCE_LA_CHECK = false; }PARSER_BEGIN(NfdStrAnalysis)package com.travelzen.etermface.client.analysis.fare;import java.io.ByteArrayInputStream;import java.io.InputStream;import com.travelzen.etermface.common.pojo.fare.NfdAllAnalysisResult;public class NfdStrAnalysis{  public static void parse(String str,NfdAllAnalysisResult nfdAllAnalysisResult) throws Exception  {    InputStream in = new ByteArrayInputStream(str.getBytes("UTF-8"));    NfdStrAnalysis nfdStrAnalysis = new NfdStrAnalysis(in);    nfdStrAnalysis.row(nfdAllAnalysisResult);  }}PARSER_END(NfdStrAnalysis)SKIP :{  " "| "\r"| "*"| "."}TOKEN :{ < stayDay : ("/")? [ "0"-"9" ][ "0"-"9" ]"D" ("/"[ "0"-"9" ][ "0"-"9" ]"D")? >| < indexInfo : [ "0"-"9" ] [ "0"-"9" ] >| < airways :([ "A"-"Z" ][ "A"-"Z" ]) | ([ "0"-"9" ][ "A"-"Z" ]) | ([ "A"-"Z" ][ "0"-"9" ]) >| < bookClass : [ "A"-"Z" ] ("/" [ "A"-"Z" ])* >| < money : ([ "0"-"9" ])+ (".") ([ "0"-"9" ])+ >| < blanks : (" ") (" ") (" ") (" ") (" ") (" ")* >| < word : [ "0"-"9", "A"-"Z" ] [ "0"-"9", "A"-"Z" ] ([ "0"-"9", "A"-"Z", "/", "*", "-" ])* ([ "0"-"9", "A"-"Z", "/", "*" ]) >| < nfn : [ "A"-"Z" ] [ "A"-"Z" ] [ "A"-"Z" ] ":" [ "0"-"9" ] [ "0"-"9" ] >| < fareBase : [ "A"-"Z" ]"/"([ "A"-"Z","0"-"9"])+("*")?>}void row(NfdAllAnalysisResult nfdAllAnalysisResult) :{  Token token;}{  //行号，肯定包含  (< indexInfo >)  //航司，肯定包含  (< airways >|< indexInfo >)  //价格，肯定包含  (moneyMatch(nfdAllAnalysisResult))  //运价基础，肯定包含  (token = < word >|token = < airways >|token = < bookClass >|token=<fareBase>)(<blanks>)?  {    nfdAllAnalysisResult.getNfdAnalysisResult().setFareBasis(token.image);  }  //仓位代码，肯定包含  (token = < bookClass >)  {    nfdAllAnalysisResult.getNfdAnalysisResult().setCabinCode(token.image);  }  //停留天数，可能包含  (    token = < stayDay >    {      String stayInfo = token.image;      if (!stayInfo.contains("/") || stayInfo.endsWith("/")){        nfdAllAnalysisResult.getNfdAnalysisResult().setMinStaty(token.image);      }else if (stayInfo.startsWith("/")){        nfdAllAnalysisResult.getNfdAnalysisResult().setMaxStaty(stayInfo.substring(1));      }else{        int index = stayInfo.indexOf("/");        nfdAllAnalysisResult.getNfdAnalysisResult().setMinStaty(stayInfo.substring(0, index));        nfdAllAnalysisResult.getNfdAnalysisResult().setMaxStaty(stayInfo.substring(index + 1));      }    }  | < blanks >  )?  //有效时间，开始时间肯定包含  (token = < word >) ("-")?(<blanks>)?  {    String dateInfo = token.image;    if (!dateInfo.contains("-") || dateInfo.endsWith("-")){      nfdAllAnalysisResult.getNfdAnalysisResult().setEffectiveStartDate(token.image);    }else if (dateInfo.startsWith("-")){      nfdAllAnalysisResult.getNfdAnalysisResult().setEffectiveEndDate(dateInfo.substring(1));    }else{      int index = dateInfo.indexOf("-");      nfdAllAnalysisResult.getNfdAnalysisResult().setEffectiveStartDate(dateInfo.substring(0, index));      nfdAllAnalysisResult.getNfdAnalysisResult().setEffectiveEndDate(dateInfo.substring(index + 1));    }  }  //nfn项，肯定包含  (token = < nfn >)?  //AP项，有可能包含  (    token = < word > (< blanks >)? (< nfn >)?    {      String ticketTimeLimit = token.image;      if (ticketTimeLimit.startsWith("AP") || ticketTimeLimit.startsWith("ap")){        nfdAllAnalysisResult.getNfdAnalysisResult().setTicketTimeLimit(token.image);      }    }  )?}void moneyMatch(NfdAllAnalysisResult nfdAllAnalysisResult) :{  Token token1;  Token token2;}{  //去程和返程价格可能独自存在，不存在的情况，使用<blanks>来代替  (    token1 = < money >    {      nfdAllAnalysisResult.getNfdAnalysisResult().setOwFare(token1.image);    }  |    token1 = < blanks >  )  (    token2 = < money >    {      nfdAllAnalysisResult.getNfdAnalysisResult().setRtFare(token2.image);    }  |    token2 = < blanks >  )}