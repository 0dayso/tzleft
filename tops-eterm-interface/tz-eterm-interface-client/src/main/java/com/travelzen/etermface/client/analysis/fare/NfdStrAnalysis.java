/* Generated By:JavaCC: Do not edit this line. NfdStrAnalysis.java */
package com.travelzen.etermface.client.analysis.fare;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import com.travelzen.etermface.common.pojo.fare.NfdAllAnalysisResult;

public class NfdStrAnalysis implements NfdStrAnalysisConstants {
  public static void parse(String str,NfdAllAnalysisResult nfdAllAnalysisResult) throws Exception
  {
    InputStream in = new ByteArrayInputStream(str.getBytes("UTF-8"));
    NfdStrAnalysis nfdStrAnalysis = new NfdStrAnalysis(in);
    nfdStrAnalysis.row(nfdAllAnalysisResult);
  }

  final public void row(NfdAllAnalysisResult nfdAllAnalysisResult) throws ParseException {
    trace_call("row");
    try {
  Token token;
      jj_consume_token(indexInfo);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case airways:
        jj_consume_token(airways);
        break;
      case indexInfo:
        jj_consume_token(indexInfo);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      moneyMatch(nfdAllAnalysisResult);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case word:
        token = jj_consume_token(word);
        break;
      case airways:
        token = jj_consume_token(airways);
        break;
      case bookClass:
        token = jj_consume_token(bookClass);
        break;
      case fareBase:
        token = jj_consume_token(fareBase);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case blanks:
        jj_consume_token(blanks);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    nfdAllAnalysisResult.getNfdAnalysisResult().setFareBasis(token.image);
      token = jj_consume_token(bookClass);
    nfdAllAnalysisResult.getNfdAnalysisResult().setCabinCode(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case stayDay:
      case blanks:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case stayDay:
          token = jj_consume_token(stayDay);
      String stayInfo = token.image;
      if (!stayInfo.contains("/") || stayInfo.endsWith("/")){
        nfdAllAnalysisResult.getNfdAnalysisResult().setMinStaty(token.image);
      }else if (stayInfo.startsWith("/")){
        nfdAllAnalysisResult.getNfdAnalysisResult().setMaxStaty(stayInfo.substring(1));
      }else{
        int index = stayInfo.indexOf("/");
        nfdAllAnalysisResult.getNfdAnalysisResult().setMinStaty(stayInfo.substring(0, index));
        nfdAllAnalysisResult.getNfdAnalysisResult().setMaxStaty(stayInfo.substring(index + 1));
      }
          break;
        case blanks:
          jj_consume_token(blanks);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      token = jj_consume_token(word);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        jj_consume_token(14);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case blanks:
        jj_consume_token(blanks);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    String dateInfo = token.image;
    if (!dateInfo.contains("-") || dateInfo.endsWith("-")){
      nfdAllAnalysisResult.getNfdAnalysisResult().setEffectiveStartDate(token.image);
    }else if (dateInfo.startsWith("-")){
      nfdAllAnalysisResult.getNfdAnalysisResult().setEffectiveEndDate(dateInfo.substring(1));
    }else{
      int index = dateInfo.indexOf("-");
      nfdAllAnalysisResult.getNfdAnalysisResult().setEffectiveStartDate(dateInfo.substring(0, index));
      nfdAllAnalysisResult.getNfdAnalysisResult().setEffectiveEndDate(dateInfo.substring(index + 1));
    }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case nfn:
        token = jj_consume_token(nfn);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case word:
        token = jj_consume_token(word);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case blanks:
          jj_consume_token(blanks);
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case nfn:
          jj_consume_token(nfn);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      String ticketTimeLimit = token.image;
      if (ticketTimeLimit.startsWith("AP") || ticketTimeLimit.startsWith("ap")){
        nfdAllAnalysisResult.getNfdAnalysisResult().setTicketTimeLimit(token.image);
      }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } finally {
      trace_return("row");
    }
  }

  final public void moneyMatch(NfdAllAnalysisResult nfdAllAnalysisResult) throws ParseException {
    trace_call("moneyMatch");
    try {
  Token token1;
  Token token2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case money:
        token1 = jj_consume_token(money);
      nfdAllAnalysisResult.getNfdAnalysisResult().setOwFare(token1.image);
        break;
      case blanks:
        token1 = jj_consume_token(blanks);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case money:
        token2 = jj_consume_token(money);
      nfdAllAnalysisResult.getNfdAnalysisResult().setRtFare(token2.image);
        break;
      case blanks:
        token2 = jj_consume_token(blanks);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("moneyMatch");
    }
  }

  /** Generated Token Manager. */
  public NfdStrAnalysisTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc0,0x2980,0x400,0x420,0x420,0x4000,0x400,0x1000,0x400,0x1000,0x800,0x600,0x600,};
   }

  /** Constructor with InputStream. */
  public NfdStrAnalysis(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NfdStrAnalysis(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NfdStrAnalysisTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public NfdStrAnalysis(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NfdStrAnalysisTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public NfdStrAnalysis(NfdStrAnalysisTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(NfdStrAnalysisTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
