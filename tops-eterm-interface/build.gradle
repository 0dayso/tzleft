apply from: 'libraries.gradle'

allprojects {
    buildDir = 'target'

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'eclipse-wtp'

    apply plugin: 'maven'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    repositories {
        maven { url 'http://192.168.160.187:8081/nexus/content/groups/public' }
        maven { url 'https://maven.alfresco.com/nexus/content/groups/public' }
        maven { url 'https://raw.github.com/dianping/cat/mvn-repo' }
        mavenCentral()
        mavenLocal()
    }
    idea {
        module {
            downloadJavadoc = false
            downloadSources = true
        }
    }
    eclipse {
        classpath {
            downloadSources = true
        }
    }


    dependencies {
        testCompile('junit:junit:4.11')
        compile "com.google.guava:guava:13.0"
        compile "org.slf4j:jul-to-slf4j:1.7.2"
        compile "org.apache.commons:commons-lang3:3.1"
        compile "joda-time:joda-time:2.1"
        compile "org.jodd:jodd-core:3.4.0"
        compile "org.jodd:jodd-bean:3.4.0"
        compile "org.codehaus.groovy:groovy-all:2.3.7"

        compile "com.travelzen:framework:${versions.framework}"
        compile "com.travelzen:framework-core:${versions.framework}"
        compile "com.travelzen:framework-config:${versions.framework}"
        compile "com.travelzen:framework-logger:${versions.framework}"
        compile "com.travelzen:tops-common-dict:${versions.framework}"
    }


    configurations { provided }
    sourceSets.main.compileClasspath += configurations.provided
    eclipse.classpath.plusConfigurations += configurations.provided

    sourceSets.main.resources {
        if (project.hasProperty('profile'))
            srcDir 'src/main/resources-' + project.profile
    }

    tasks.withType(GroovyCompile) { groovyOptions.encoding = "UTF-8" }
    tasks.withType(Compile) { options.encoding = 'UTF-8' }

    eclipseProject.doLast {
        if (!new File("$projectDir/src").exists() && !new File("$projectDir/gen-java").exists()) {
            ant.delete dir: '.settings'
            ant.delete file: '.project'
            ant.delete file: '.classpath'
        }
    }

    afterEvaluate {
        if (project.plugins.findPlugin('war') && project.hasProperty('profile')) {
            webapp = project.webAppDirName
            webtmp = webapp + '-tmp'
            war.doFirst {
                copy {
                    from "$projectDir/" + webapp
                    into "$projectDir/" + webtmp
                }
                if (project.hasProperty('profile')) {
                    copy {
                        from "$projectDir/" + webapp + '-' + project.profile
                        into "$projectDir/" + webtmp
                    }
                }
                project.webAppDirName = webtmp
            }
            war.doLast {
                ant.delete dir: webtmp
            }
        }
    }

    task 'create-dirs' << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }

    task zip(type: Zip) {
        from('script') { into('bin') }
        from('src/main/resources') { into('conf') }
        if (project.hasProperty('profile'))
            from('src/main/resources-' + project.profile) { into('conf') }
        into('lib') {
            from('lib')
            from(jar.outputs.files)
            from(configurations.compile)
        }
    }
    zip.doFirst {
        if (new File("$projectDir/script").exists()) {
            classpath = new File("$projectDir/script/.classpath")
            if (!classpath.exists()) classpath.createNewFile()
            cp = 'CLASSPATH='
            for (file in new File("$projectDir/lib").listFiles()) cp += '../lib/' + file.name + ';'
            for (file in configurations.compile) cp += '../lib/' + file.name + ';'
            for (file in jar.outputs.files) cp += '../lib/' + file.name + ';'
            classpath.text = cp.substring(0, cp.length() - 1)
        }
    }
    
    tasks.withType(War) {
		manifest {
			attributes("Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Built-By": System.getProperty('user.name'),
			"Built-JDK": System.getProperty('java.version'),
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
			)
		}
	}

	tasks.withType(Jar) {
		manifest {
			attributes("Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Built-By": System.getProperty('user.name'),
			"Built-JDK": System.getProperty('java.version'),
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
			)
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	tasks.withType(Compile) {
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
		options.encoding = 'UTF-8'
	}
	
	uploadArchives {
		repositories {
			mavenDeployer {
				repository(url: 'http://192.168.160.187:8081/nexus/content/repositories/releases') {
					authentication(userName: "admin", password: "tznexus")
				}
				snapshotRepository(url: 'http://192.168.160.187:8081/nexus/content/repositories/snapshots') {
					authentication(userName: "admin", password: "tznexus")
				}
			}
		}
	}

}
